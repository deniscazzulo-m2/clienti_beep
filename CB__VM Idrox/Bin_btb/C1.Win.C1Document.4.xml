<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Win.C1Document.4</name>
    </assembly>
    <members>
        <member name="T:C1.Win.C1Document.C1Document">
            <summary>
            Represents a ComponentOne Document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IRenderObjectOwner">
            <summary>
            This interface must be implemented by object which works as owner 
            for the RenderObject objects.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IDocumentObjectOwner">
            <summary>
            Should be implemented by object owning <see cref="T:C1.Win.C1Document.DocumentObject"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1Document.DefaultUnit">
            <summary>
            The default measurement unit.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1Document.DefaultUnitComparePrecision">
            <summary>
            The default precision used to compare units of measurement.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1Document.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1Document"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1Document.FindRenderObject(System.String)">
            <summary>
            Finds a render object by name.
            </summary>
            <param name="name">The name to find.</param>
            <returns>The found object, or null.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1Document.Clear">
            <summary>
            Clears the current document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Document.Body">
            <summary>
            Gets the document body.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Document.DocumentInfo">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Document.C1Document.DocumentInfo"/> object containing the information
            about the current document (such as author, company, and so on).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Document.CompatibilityOptions">
            <summary>
            Gets the <see cref="P:C1.Win.C1Document.C1Document.CompatibilityOptions"/> object which determines compatibility
            with previous versions of C1PrintDocument.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Document.Dictionary">
            <summary>
            Gets the current document's dictionary.
            The dictionary can be used to contain reusable resources
            (e.g. images used in multiple places in the document).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Document.Outlines">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.OutlineNodeCollection"/> representing the collection of
            <see cref="T:C1.Win.C1Document.OutlineNode"/> objects of the current document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1HighlightAttrs">
            <summary>
            Defines attributes used to highlight content of document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1ParagraphHighlight">
            <summary>
            Defines highlighting in the block of text.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentLocation">
            <summary>
            Represents document location.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1LinkTarget">
            <summary>
            Defines the link to another document or place within same document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1HyperlinkStateEnum">
            <summary>
            Represents the state of a <see cref="T:C1.Win.C1Document.C1Hyperlink"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1HyperlinkStateEnum.Normal">
            <summary>
            An unvisited hyperlink.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1HyperlinkStateEnum.Visited">
            <summary>
            A hyperlink that has been visited.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1HyperlinkStateEnum.Hover">
            <summary>
            A hyperlink under the mouse pointer.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1HyperlinkStateEnum.Active">
            <summary>
            A hyperlink that has been clicked, but not yet visited.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1Hyperlink">
            <summary>
            Represents a hyperlink in a document.
            A hyperlink may be assigned to a <see cref="T:C1.Win.C1Document.RenderObject"/>'s <see cref="P:C1.Win.C1Document.RenderObject.Hyperlink"/>,
            or a <see cref="T:C1.Win.C1Document.ParagraphObject"/>'s <see cref="P:C1.Win.C1Document.ParagraphObject.Hyperlink"/> property.
            In that case clicking on that object in a viewer will jump to the hyperlink's <see cref="P:C1.Win.C1Document.C1Hyperlink.LinkTarget"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1Hyperlink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1Hyperlink"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1Hyperlink.#ctor(C1.Win.C1Document.C1LinkTarget)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1Hyperlink"/> class,
            assigning its <see cref="P:C1.Win.C1Document.C1Hyperlink.LinkTarget"/> to the specified <see cref="T:C1.Win.C1Document.C1LinkTarget"/>.
            </summary>
            <param name="linkTarget">The <see cref="T:C1.Win.C1Document.C1LinkTarget"/> to set as the target of the current hyperlink.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1Hyperlink.#ctor(C1.Win.C1Document.C1LinkTarget,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1Hyperlink"/> class,
            assigning its <see cref="P:C1.Win.C1Document.C1Hyperlink.LinkTarget"/> to the specified <see cref="T:C1.Win.C1Document.C1LinkTarget"/>.
            </summary>
            <param name="linkTarget">The <see cref="T:C1.Win.C1Document.C1LinkTarget"/> to set as the target of the current hyperlink.</param>
            <param name="statusText">The string to assign to <see cref="P:C1.Win.C1Document.C1Hyperlink.StatusText"/> of the current hyperlink.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1Hyperlink.#ctor(C1.Win.C1Document.C1LinkTarget,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1Hyperlink"/> class,
            assigning its <see cref="P:C1.Win.C1Document.C1Hyperlink.LinkTarget"/> to the specified <see cref="T:C1.Win.C1Document.C1LinkTarget"/>.
            </summary>
            <param name="linkTarget">The <see cref="T:C1.Win.C1Document.C1LinkTarget"/> to set as the target of the current hyperlink.</param>
            <param name="statusText">The string to assign to <see cref="P:C1.Win.C1Document.C1Hyperlink.StatusText"/> of the current hyperlink.</param>
            <param name="tag">Arbitrary value to assign to <see cref="P:C1.Win.C1Document.C1Hyperlink.Tag"/> of the current hyperlink.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1Hyperlink.AssignFrom(C1.Win.C1Document.C1Hyperlink)">
            <summary>
            Copies the properties of the specified object to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1Hyperlink.Clone">
            <summary>
            Creates a copy of the current object.
            </summary>
            <returns>The newly created object.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1Hyperlink.StatusText">
            <summary>
            Text shown in the status line when the mouse is over the link
            (when the document is viewed in a <b>C1PrintPreview</b>).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Hyperlink.LinkTarget">
            <summary>
            Determines the target of the current hyperlink.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Hyperlink.Tag">
            <summary>
            Gets or sets arbitrary data associated with the current hyperlink.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Hyperlink.State">
            <summary>
            Gets or sets the state of the current hyperlink.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.DrawAttrs">
            <summary>
            Structure specifies attributes used to draw <see cref="T:C1.Win.C1Document.C1Page"/>, <see cref="T:C1.Win.C1Document.RenderFragment"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IC1HighlightingManager">
            <summary>
            This interface used by <see cref="T:C1.Win.C1Document.C1Page"/> and <see cref="T:C1.Win.C1Document.RenderFragment"/> objects
            to determine highlighted regions.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.IC1HighlightingManager.GetParagraphHighlight(C1.Win.C1Document.RenderParagraphFragment)">
            <summary>
            Returns highlighting area for paragraph fragment.
            </summary>
            <param name="paragraph"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.C1Page">
            <summary>
            Represents a single page of the C1DocumentView.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IPageObject">
            <summary>
            Defines common interface for all objects representing content of generated document.
            This interface implemented by <see cref="T:C1.Win.C1Document.C1Page"/>, <see cref="T:C1.Win.C1Document.RenderFragment"/> etc.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ICloneableObject">
            <summary>
            Represents cloneable object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ICloneableObject.CreateSame">
            <summary>
            Creates a clone.
            </summary>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.ICloneableObject.AssignFrom(System.Object)">
            <summary>
            Assigns all from another object.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1Page.EnumerateParagraphs(C1.Win.Interop.Rect,C1.Win.C1Document.EnumerateParagraphCallback)">
            <summary>
            Enumerates all <see cref="T:C1.Win.C1Document.RenderParagraphFragment"/> objects intersecting with specified rectangle.
            Rectangle specified relative to the top-left corner of the page.
            </summary>
            <param name="bounds"></param>
            <param name="callback"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1Page.HitTest(C1.Win.Interop.Point)">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.HitTestInfo"/> object containing information about a specific
            point within a <see cref="T:C1.Win.C1Document.C1Page"/>. 
            </summary>
            <param name="point">Specifying test point coordinates relative to the page top-left corner, in C1Document.DefaultUnit units.</param>
            <returns>A <see cref="T:C1.Win.C1Document.HitTestInfo"/> object that contains information about elements located at the test point.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1Page.PageIndex">
            <summary>
            Gets the logical index of the page in the generated document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Page.HasFragments">
            <summary>
            Gets a value indicating whether <see cref="P:C1.Win.C1Document.C1Page.Fragments"/> collection is not empty.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1Page.Fragments">
            <summary>
            Gets collection of <see cref="T:C1.Win.C1Document.RenderFragment"/> object containing on this <see cref="T:C1.Win.C1Document.C1Page"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1PageCollection">
            <summary>
            Represents collection of <see cref="T:C1.Win.C1Document.C1Page"/> object sorted by <see cref="P:C1.Win.C1Document.C1Page.PageIndex"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1PageSettings">
            <summary>
            Represents the page settings of a <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1PageSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1PageSettings"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1PageSettings.FindRealPaperSize(System.Drawing.Printing.PrinterSettings.PaperSizeCollection,System.Boolean@)">
            <summary>
            Looks for a matching paper size among papers supported by a specific printer.
            First, an attempt is made to find an exact paper kind match.
            If that fails, a size match is attempted, both "as is" and with the paper rotated.
            If that fails, null is returned.
            </summary>
            <param name="paperSizes">The collection of paper sizes supported by the printer.</param>
            <param name="landscape">IN/OUT: orientation; may be changed.</param>
            <returns>The matching real paper size, or null.
            This value should be used together with <paramref name="landscape"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1PageSettings.IsValidSize(C1.Win.C1Document.Unit)">
            <summary>
            Returns true if specified <see cref="T:C1.Win.C1Document.Unit"/> can be used to define <see cref="P:C1.Win.C1Document.C1PageSettings.Width"/>
            or <see cref="P:C1.Win.C1Document.C1PageSettings.Height"/>, like width, height, margins etc.
            </summary>
            <param name="size"><see cref="T:C1.Win.C1Document.Unit"/> to test.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1PageSettings.IsValidMarginSize(C1.Win.C1Document.Unit)">
            <summary>
            Returns true if specified <see cref="T:C1.Win.C1Document.Unit"/> can be used to define size of margin of
            <see cref="T:C1.Win.C1Document.C1PageSettings"/> object.
            </summary>
            <param name="size"><see cref="T:C1.Win.C1Document.Unit"/> to test.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1PageSettings.IsLayoutEqual(System.Drawing.Printing.PageSettings)">
            <summary>
            Gets a value indicating whether this <see cref="T:C1.Win.C1Document.C1PageSettings"/> object has
            same layout as specified <see cref="T:System.Drawing.Printing.PageSettings"/> object, i.e. it has
            same paper size and margins.
            </summary>
            <param name="pageSettings">PageSettings object to compare with.</param>
            <returns><b>true</b> if layouts are same, <B>false</B> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1PageSettings.AssignFrom(System.Drawing.Printing.PageSettings)">
            <summary>
            Assigns (copies) properties from a <see cref="T:System.Drawing.Printing.PageSettings"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1PageSettings.ToPageSettings(System.Drawing.Printing.PrinterSettings)">
            <summary>
            Creates an instance of the <see cref="T:System.Drawing.Printing.PageSettings"/> class,
            and initializes it with the properties of the current <see cref="T:C1.Win.C1Document.C1PageSettings"/> object.
            </summary>
            <param name="printerSettings">A <see cref="T:System.Drawing.Printing.PrinterSettings"/> object
            used to create the resulting <see cref="T:System.Drawing.Printing.PageSettings"/>.
            If null, the default printer is used.</param>
            <returns>The newly created <see cref="T:System.Drawing.Printing.PageSettings"/> object.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1PageSettings.Landscape">
            <summary>
            Gets or sets a value indicating whether to use landscape orientation.
            Changing this property swaps height and width of the page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PageSettings.PaperSize">
            <summary>
            Gets or sets the paper kind.
            Changing of this property may change <see cref="P:C1.Win.C1Document.C1PageSettings.Width"/> and/or <see cref="P:C1.Win.C1Document.C1PageSettings.Height"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PageSettings.Width">
            <summary>
            Gets or sets the width of the paper.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PageSettings.Height">
            <summary>
            Gets or sets the height of the paper.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PageSettings.LeftMargin">
            <summary>
            Gets or sets the left margin.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PageSettings.TopMargin">
            <summary>
            Gets or sets the top margin.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PageSettings.RightMargin">
            <summary>
            Gets or sets the right margin.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1PageSettings.BottomMargin">
            <summary>
            Gets or sets the bottom margin.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.BordersModeEnum">
            <summary>
            Specifies the various modes of accounting for border thickness when
            laying out the objects in a document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BordersModeEnum.Default">
            <summary>
            Whole border is considered to be part of the object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BordersModeEnum.C1Report">
            <summary>
            The inner 1/2 of border thickness is considered to be part of the object,
            the outer 1/2 of border is considered to be outside of the object's space.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BordersModeEnum.Rdl">
            <summary>
            Border thickness is not taken into account at all when calculating objects'
            sizes and layout. Borders are drawn centered on objects' bounds.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.CompatibilityOptions">
            <summary>
            Defines the compatibility options for C1PrintDocument.
            Contains properties specifying compatibility with
            previous versions of C1PrintDocument.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.CompatibilityOptions.AssignFrom(C1.Win.C1Document.CompatibilityOptions)">
            <summary>
            Copies properties from another object into this object.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="M:C1.Win.C1Document.CompatibilityOptions.Reset">
            <summary>
            Resets properties of this object to default values.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.CompatibilityOptions.BordersMode">
            <summary>
            Gets or sets a valud specifying how borders affect the layout of objects in a document.
            <para>See <see cref="T:C1.Win.C1Document.BordersModeEnum"/> for details.</para>
            <para>
            The default value is <see cref="F:C1.Win.C1Document.BordersModeEnum.Default"/>.
            </para>
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.CompatibilityOptions.KeepImages">
            <summary>
            Specifies whether images in a document dictionary are kept as <b>Image</b> objects.
            Set this property to <b>false</b> to save images as raw data to optimize memory usage.
            </summary>
            <para>
            The default value is <b>true</b>.
            </para>
        </member>
        <member name="P:C1.Win.C1Document.CompatibilityOptions.StretchBarCodesAsImages">
            <summary>
            Gets or sets a value indicating whether to stretch barcodes as images.
            <para>The default value is false, which is compatible with previous versions.</para>
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.CompatibilityOptions.UseGdiLinesInPdfExport">
            <summary>
            Gets or sets a value indicating whether GDI functions should be used to draw lines when rendering for output to PDF.
            The default value is false. Setting this property to true may result in much smaller file sizes in documents
            containing many dashed/dotted lines.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.CompatibilityOptions.ClipPage">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.DictionaryItem">
            <summary>
            The base class for types of objects that can be inserted in a <see cref="T:C1.Win.C1Document.C1Document"/>'s <see cref="T:C1.Win.C1Document.Dictionary"/>.
            Derived classes include <see cref="T:C1.Win.C1Document.DictionaryImage"/>.
            </summary>
            <seealso cref="P:C1.Win.C1Document.C1Document.Dictionary"/>
        </member>
        <member name="T:C1.Win.C1Document.NamedObject">
            <summary>
            Represents a named object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.OwnedObject">
            <summary>
            Abstract base class representing an object with an owner.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IOwnedObject">
            <summary>
            Represents interface which should be implemented by object owned by another object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IOwnedObject.Owner">
            <summary>
            Gets or sets the owner object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.OwnedObject.SetOwner(System.Object)">
            <summary>
            Sets the owner of the current object.
            </summary>
            <param name="value">The owner to set.</param>
        </member>
        <member name="M:C1.Win.C1Document.OwnedObject.CreateSame">
            <summary>
            Creates a clone of the current object.
            </summary>
            <returns>The newly created clone.</returns>
        </member>
        <member name="M:C1.Win.C1Document.OwnedObject.AssignFrom(System.Object)">
            <summary>
            Assigns all from another object.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="P:C1.Win.C1Document.OwnedObject.Owner">
            <summary>
            Gets an owner of this object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.INamedObject">
            <summary>
            Represents an object with a unique name.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.INamedObject.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.NamedObject.SetName(System.String)">
            <summary>
            Sets the name of the current object.
            </summary>
            <param name="value">The new name for the object.</param>
        </member>
        <member name="M:C1.Win.C1Document.NamedObject.Clone">
            <summary>
            Clones the current object.
            </summary>
            <returns>The newly created clone.</returns>
        </member>
        <member name="P:C1.Win.C1Document.NamedObject.Name">
            <summary>
            Gets or sets the unique name of the current object.
            If an item with the specified name already exists in the owner,
            an exception is thrown.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.DictionaryItem"/> class.
            </summary>
            <param name="name">The name of the <see cref="T:C1.Win.C1Document.DictionaryItem"/>.</param>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryItem.SetName(System.String)">
            <summary>
            Overridden. Sets the name of the current item.
            </summary>
            <param name="newName">The new name.</param>
        </member>
        <member name="P:C1.Win.C1Document.DictionaryItem.Owner">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.Dictionary"/> object that is the owner of the current item.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Dictionary">
            <summary>
            Represents a dictionary within a <see cref="T:C1.Win.C1Document.C1Document"/>.
            The dictionary allows to store an object such as an image or an icon once,
            and reuse it throughout the document.
            Items contained in the dictionary must have types derived from <see cref="T:C1.Win.C1Document.DictionaryItem"/>
            (e.g. <see cref="T:C1.Win.C1Document.DictionaryImage"/>).
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.NamedCollection`1">
            <summary>
            Represents an <see cref="T:C1.Win.C1Document.OwnedCollection`1"/> of uniquely-named elements.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.OwnedCollection`1">
            <summary>
            Base class for collection containing items supporting IOwnedObject interface.
            Collection updates Owner property of items.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:C1.Win.C1Document.OwnedCollectionBase`1">
            <summary>
            Base collection implementing IOwnedObject interface.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:C1.Win.C1Document.OwnedCollectionBase`1.SetOwner(System.Object)">
            <summary>
            Sets the owner of the current object.
            </summary>
            <param name="value">The owner to set.</param>
        </member>
        <member name="P:C1.Win.C1Document.OwnedCollectionBase`1.Owner">
            <summary>
            Gets a collection owner.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.OwnedCollection`1.CreateSame">
            <summary>
            Creates a clone of the current object.
            </summary>
            <returns>The newly created clone.</returns>
        </member>
        <member name="M:C1.Win.C1Document.OwnedCollection`1.AssignFrom(C1.Win.C1Document.OwnedCollection{`0})">
            <summary>
            Copies all from another object.
            </summary>
            <param name="source">The source to copy from.</param>
        </member>
        <member name="T:C1.Win.C1Document.INamedObjectOwner">
            <summary>
            This interface should be implemented by object if it wants to receive notifications 
            about name changing.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.INamedObjectOwner.CheckName(C1.Win.C1Document.INamedObject,System.String)">
            <summary>
            Checks a name.
            </summary>
            <param name="obj"></param>
            <param name="newName"></param>
        </member>
        <member name="M:C1.Win.C1Document.NamedCollection`1.CheckName(C1.Win.C1Document.INamedObject,System.String)">
            <summary>
            Throws an exception if collection already contains item with specified name.
            </summary>
            <param name="item"></param>
            <param name="newName"></param>
        </member>
        <member name="M:C1.Win.C1Document.NamedCollection`1.IndexOfName(System.String)">
            <summary>
            Returns the 0-based index of a INamedObject
            with specified name in the current <see cref="T:C1.Win.C1Document.NamedCollection`1"/>.
            </summary>
            <param name="name">The name of the item to locate. </param>
            <returns>The 0-based index of the specified item, or -1 if the item was not found.</returns>
        </member>
        <member name="M:C1.Win.C1Document.NamedCollection`1.FindByName(System.String)">
            <summary>
            Returns item with specified name.
            </summary>
            <param name="name">The name of the item to locate.</param>
            <returns>The specified item</returns>
        </member>
        <member name="M:C1.Win.C1Document.NamedCollection`1.AssignFrom(C1.Win.C1Document.OwnedCollection{`0})">
            <summary>
            Copies all from another object.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="P:C1.Win.C1Document.NamedCollection`1.Item(System.String)">
            <summary>
            Gets the item with the specified name.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Dictionary.Document">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1Document"/> object that is the owner of the current dictionary.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.DictionaryImage">
            <summary>
            Represents an image stored in a <see cref="T:C1.Win.C1Document.Dictionary"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.DictionaryImage"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryImage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.DictionaryImage"/> class.
            </summary>
            <param name="name">The name of the current item.</param>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryImage.#ctor(System.String,C1.Win.C1Document.C1Image)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.DictionaryImage"/> class.
            </summary>
            <param name="name">The name of the current item.</param>
            <param name="image">The image to store in the current item.</param>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryImage.CreateSame">
            <summary>
            Creates new empty instance of the <see cref="T:C1.Win.C1Document.DictionaryImage"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryImage.AssignFrom(System.Object)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Document.DictionaryImage"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.Win.C1Document.DictionaryImage.Image">
            <summary>
            Gets or sets the image stored by the current <see cref="T:C1.Win.C1Document.DictionaryImage"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IDictionaryItemLinkOwner">
            <summary>
            <para>For internal use only.</para>
            This interface should be implemented by a class if it needs to hold a link (reference)
            to an object in a <see cref="P:C1.Win.C1Document.IDictionaryItemLinkOwner.Dictionary"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IDictionaryItemLinkOwner.Dictionary">
            <summary>
            Gets the <see cref="P:C1.Win.C1Document.IDictionaryItemLinkOwner.Dictionary"/> where the <see cref="T:C1.Win.C1Document.DictionaryItem"/> is stored.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.DictionaryItemLink`1">
            <summary>
            The base class describing a link (reference) to a <see cref="T:C1.Win.C1Document.DictionaryItem"/>.
            Provides the base functionality, derived classes such as <see cref="T:C1.Win.C1Document.DictionaryImageLink"/>
            represent links to specific type of dictionary items.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryItemLink`1.#ctor(C1.Win.C1Document.IDictionaryItemLinkOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.DictionaryItemLink`1"/> class.
            </summary>
            <param name="owner">The owner of this instance.</param>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryItemLink`1.GetItemData">
            <summary>
            Gets the data representing the item.
            </summary>
            <returns>The data representing the item.</returns>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryItemLink`1.AssignFrom(C1.Win.C1Document.DictionaryItemLink{`0})">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Document.DictionaryItemLink`1"/> to the current object.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:C1.Win.C1Document.DictionaryItemLink`1.DataInt">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DictionaryItemLink`1.Owner">
            <summary>
            Gets the owner of the current dictionary item.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DictionaryItemLink`1.Document">
            <summary>
            Gets <see cref="T:C1.Win.C1Document.C1Document"/> object containing the curret dictionary item.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DictionaryItemLink`1.Data">
            <summary>
            Gets or sets data representing the object stored in the dictionary.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DictionaryItemLink`1.ItemName">
            <summary>
            Gets or sets the name of the item in the dictionary.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DictionaryItemLink`1.HasData">
            <summary>
            Gets a value indicating whether <see cref="T:C1.Win.C1Document.DictionaryItemLink`1"/> contains data.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.DictionaryImageLink">
            <summary>
            Specializes the <see cref="T:C1.Win.C1Document.DictionaryItemLink`1"/> class to represent a link to an image.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryImageLink.#ctor(C1.Win.C1Document.IDictionaryItemLinkOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.DictionaryImageLink"/> class.
            </summary>
            <param name="owner">The owner of this instance.</param>
        </member>
        <member name="M:C1.Win.C1Document.DictionaryImageLink.GetItemData">
            <summary>
            Gets the data representing the item.
            </summary>
            <returns>The data representing the item.</returns>
        </member>
        <member name="T:C1.Win.C1Document.DocumentBody">
            <summary>
            Represents content of <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderObject">
            <summary>
            The abstract base class for all render objects representing content of a <see cref="!:C1PrintDocument"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.DocumentObject">
            <summary>
            Base class representing content in <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IStyleOwner">
            <summary>
            Defines a class that can expose a <b>Style</b> property (of the type <see cref="P:C1.Win.C1Document.IStyleOwner.Style"/>).
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.IStyleOwner.GetAmbientParentStyle">
            <summary>
            Gets the parent style for ambient properties
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IStyleOwner.Style">
            <summary>
            Gets <see cref="P:C1.Win.C1Document.IStyleOwner.Style"/> owned by object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.DocumentObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.RenderObject"/> class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentObject.Document">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.C1Document"/> object containing this <see cref="T:C1.Win.C1Document.DocumentObject"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentObject.Owner">
            <summary>
            The owner object containing this <see cref="T:C1.Win.C1Document.DocumentObject"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentObject.Style">
            <summary>
            Gets the <see cref="P:C1.Win.C1Document.DocumentObject.Style"/> of the current object.
            This property cannot be assigned to. To use another style as the base
            for the current object's style, set the Style.Parent to that other style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.Owner">
            <summary>
            The owner object containing this <see cref="T:C1.Win.C1Document.RenderObject"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.BordersSplitVertMode">
            <summary>
            Gets or sets a value indicating how borders are drawn
            if the object is too high and is split between pages.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.BordersSplitHorzMode">
            <summary>
            Gets or sets a value indicating how borders are drawn
            if the object is too wide and is split between horizontal pages.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.Tag">
            <summary>
            Gets or sets custom user defined data associated with this <see cref="T:C1.Win.C1Document.RenderObject"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.ToolTip">
            <summary>
            Gets or sets tooltip associated with this <see cref="T:C1.Win.C1Document.RenderObject"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderObject.Hyperlink">
            <summary>
            Gets or sets the hyperlink (see <see cref="T:C1.Win.C1Document.C1Hyperlink"/>) associated with the current object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentBody.Owner">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.C1Document"/> object containing this <see cref="T:C1.Win.C1Document.DocumentBody"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentBody.Sections">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.RenderSectionCollection"/> which represents content of document body.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.DocumentInfoFields">
            <summary>
            Enumerates the fields stored by the <see cref="T:C1.Win.C1Document.DocumentInfo"/> class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.None">
            <summary>
            No fields.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Title">
            <summary>
            The title of the document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Author">
            <summary>
            The author of the document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Operator">
            <summary>
            The person who last made changes to the document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Manager">
            <summary>
            The manager of the author.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Company">
            <summary>
            The company of the author.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Subject">
            <summary>
            The subject of the document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Comment">
            <summary>
            The document comments.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.CreationTime">
            <summary>
            The date and time when the document was created.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.RevisionTime">
            <summary>
            The date and time when the document was last modified.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Creator">
            <summary>
            The application that created the original document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Keywords">
            <summary>
            The keywords for the document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.Producer">
            <summary>
            The application that created the document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.DocumentInfoFields.All">
            <summary>
            All fields.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.DocumentInfo">
            <summary>
            Represents general information about a <see cref="T:C1.Win.C1Document.C1Document"/>,
            such as author, subject, creation date and time, and so on.
            Can be accessed via the <see cref="P:C1.Win.C1Document.C1Document.DocumentInfo"/> property on a document.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.DocumentInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.DocumentInfo"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.DocumentInfo.AssignFrom(C1.Win.C1Document.DocumentInfo)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Document.DocumentInfo"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Document.DocumentInfo.Clone">
            <summary>
            Creates a copy of the current <see cref="T:C1.Win.C1Document.DocumentInfo"/> object.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.DocumentInfo"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.DocumentInfo.GetKeywordsAsText">
            <summary>
            Returns the <see cref="P:C1.Win.C1Document.DocumentInfo.Keywords"/> collection of the current object
            as a single space-delimited string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.DocumentInfo.SetKeywordsAsText(System.String)">
            <summary>
            Assigns the <see cref="P:C1.Win.C1Document.DocumentInfo.Keywords"/> collection on the current object
            from a single string containing the space-delimited list of keywords.
            (Note that the <see cref="P:C1.Win.C1Document.DocumentInfo.Keywords"/> collection is cleared by this method prior to assignment.)
            </summary>
            <param name="value">The space-delimited list of keywords.</param>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Title">
            <summary>
            Gets or sets the title of a document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Author">
            <summary>
            Gets or sets the author of a document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Operator">
            <summary>
            Gets or sets the person who last made changes to a document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.CreationTime">
            <summary>
            Gets or sets the date and time when a document was created.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.RevisionTime">
            <summary>
            Gets or sets the date and time when a document was last modified.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Subject">
            <summary>
            Gets or sets the subject of a document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Producer">
            <summary>
            Gets or sets the application that created a document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Creator">
            <summary>
            Gets or sets the application that created the original document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Company">
            <summary>
            Gets or sets the company of a document's author.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Keywords">
            <summary>
            Gets or sets the keywords for a document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Manager">
            <summary>
            Gets or sets the manager of the author.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.DocumentInfo.UserData">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.Dictionary`2"/> of custom user defined string keys and strings associated with a document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.DocumentObjectCollection`1">
            <summary>
            Represents the collection of DocumentObject objects.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:C1.Win.C1Document.DocumentObjectCollection`1.Owner">
            <summary>
            The owner object containing the current collection.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentRange">
            <summary>
            Base class defines the range of document.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentRange.GetPositions(C1.Win.C1Document.C1DocumentTextPosition@,C1.Win.C1Document.C1DocumentTextPosition@)">
            <summary>
            Returns two <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> objects defining the start and end positions of this document range.
            </summary>
            <param name="start"><see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> defining the start position of this document range.</param>
            <param name="end"><see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> defining the end position of this document range.</param>
        </member>
        <member name="T:C1.Win.C1Document.C1ParagraphDocumentRange">
            <summary>
            Represents the document range within single <see cref="T:C1.Win.C1Document.RenderParagraphFragment"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1FreeLayoutDocumentRange">
            <summary>
            Represents the document range used to select a text in the unstructured document.
            Selection defined by the two <see cref="T:C1.Win.C1Document.C1ParagraphFragmentTextPosition"/> objects,
            one represents start of range and second represents end of range,
            those positions belong to different <see cref="T:C1.Win.C1Document.RenderParagraphFragment"/> objects.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FreeLayoutDocumentRange.SelectionContext.m_Paragraph">
            <summary>
            Currently processed paragraph fragment.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FreeLayoutDocumentRange.SelectionContext.m_ParagraphSizePx">
            <summary>
            Size of currently processed paragraph content area in pixels of <see cref="P:C1.Win.C1Document.C1FreeLayoutDocumentRange.SelectionContext.TextMeasurementContext"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1FreeLayoutDocumentRange.SelectionContext.TextMeasurementContext">
            <summary>
            Text measurement contenxt.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FreeLayoutDocumentRange.RectSelectionContext.PageSelectionArea">
            <summary>
            Defines selection rectangle relative to top-left page corner.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1FreeLayoutDocumentRange.RectSelectionContext.ParagraphSelectionAreaPx">
            <summary>
            Selection area relative to top-left corner of paragraph content area in pixels of <see cref="!:TextMeasurementContext"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentTextPosition">
            <summary>
            Base class describes text position within <see cref="T:C1.Win.C1Document.C1Document"/>.
            Text position always linked with text paragraph and character within this paragraph
            and specifies place <b>before</b> character.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentTextPosition.GetVisualPosition">
            <summary>
            Returns coordinates of current <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> on the <see cref="T:C1.Win.C1Document.C1Page"/>
            relative to the top-left corner of the page.
            </summary>
            <returns><see cref="!:Rect"/> structure defining coordinates of the text position.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentTextPosition.op_Equality(C1.Win.C1Document.C1DocumentTextPosition,C1.Win.C1Document.C1DocumentTextPosition)">
            <summary>
            Determines if the specified values are equal.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentTextPosition.op_Inequality(C1.Win.C1Document.C1DocumentTextPosition,C1.Win.C1Document.C1DocumentTextPosition)">
            <summary>
            Determines if the specified values are not equal.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1ParagraphFragmentTextPosition">
            <summary>
            Defines text position within <see cref="T:C1.Win.C1Document.C1Document"/> via <see cref="T:C1.Win.C1Document.RenderParagraphFragment"/> and index
            of text position within this fragment.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1ParagraphFragmentTextPosition.#ctor(C1.Win.C1Document.RenderParagraphFragment,System.Int32,C1.Win.Interop.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1ParagraphFragmentTextPosition"/> structure.
            </summary>
            <param name="paragraph"><see cref="T:C1.Win.C1Document.RenderParagraphFragment"/> contained text position.</param>
            <param name="index">Text position within paragraph fragment.</param>
            <param name="visualPosition"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1ParagraphFragmentTextPosition.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current <see cref="T:C1.Win.C1Document.C1ParagraphFragmentTextPosition"/>.
            </summary>
            <param name="obj">The object to compare with the current object. </param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1ParagraphFragmentTextPosition.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:C1.Win.C1Document.C1ParagraphFragmentTextPosition"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:C1.Win.C1Document.C1ParagraphFragmentTextPosition"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1ParagraphFragmentTextPosition.Paragraph">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.RenderParagraphFragment"/> object containing text position.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1ParagraphFragmentTextPosition.Index">
            <summary>
            Get the text position within paragraph fragment object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1FoundPosition">
            <summary>
            Represents a position in a document where a text was found.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1FoundPosition.GetPage">
            <summary>
            Returns <see cref="T:C1.Win.C1Document.C1Page"/> object where find position located.
            </summary>
            <returns><see cref="T:C1.Win.C1Document.C1Page"/> object where find position located.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1FoundPosition.GetStart">
            <summary>
            Returns <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> object defining start of searched text.
            </summary>
            <returns><see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> object defining start of searched text.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1FoundPosition.GetEnd">
            <summary>
            Returns <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> object defining end of searched text.
            </summary>
            <returns><see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> object defining end of searched text.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1FoundPosition.NearText">
            <summary>
            Gets the text near the found position.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1FoundPosition.PositionInNearText">
            <summary>
            Gets the zero-based position of the found string in <see cref="P:C1.Win.C1Document.C1FoundPosition.NearText"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1FoundParagraphPosition">
            <summary>
            Represents text searched within <see cref="T:C1.Win.C1Document.RenderParagraphFragment"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1FoundPageRange">
            <summary>
            Represents text searched on single page of document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1ParagraphRange">
            <summary>
            Defines the range of paragraph, represented as list of <see cref="T:C1.Win.C1Document.C1TextRange"/> structures.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1ParagraphRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1ParagraphRange"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1ParagraphRange.#ctor(System.Collections.Generic.IList{C1.Win.C1Document.C1TextRange})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1ParagraphRange"/> class.
            <see cref="T:C1.Win.C1Document.C1ParagraphRange"/> will use passed list of text ranges, i.e. it will not create own copy.
            </summary>
            <param name="textRanges">List of <see cref="T:C1.Win.C1Document.C1TextRange"/> structures.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1ParagraphRange.#ctor(C1.Win.C1Document.C1TextRange[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1ParagraphRange"/> class.
            <see cref="T:C1.Win.C1Document.C1ParagraphRange"/> will use passed list of text ranges, i.e. it will not create own copy.
            </summary>
            <param name="textRanges">List of <see cref="T:C1.Win.C1Document.C1TextRange"/> structures.</param>
        </member>
        <member name="P:C1.Win.C1Document.C1ParagraphRange.Count">
            <summary>
            Gets the count of text ranges.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1ParagraphRange.Item(System.Int32)">
            <summary>
            Gets the text range with specified index.
            </summary>
            <param name="index">Index of the text range.</param>
            <returns><see cref="T:C1.Win.C1Document.C1TextRange"/> structure defining text range.</returns>
        </member>
        <member name="T:C1.Win.C1Document.C1TextRange">
            <summary>
            Represents a continuous range of text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1TextRange.Full">
            <summary>
            Represents the full (all-inclusive) range.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1TextRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1TextRange"/> struct.
            </summary>
            <param name="startIndex">Index of the first char in text interval.</param>
            <param name="length">Length of the text interval.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1TextRange.Contains(System.Int32)">
            <summary>
            Tests whether a specified position is contained within the current range.
            </summary>
            <param name="position">The position to test.</param>
            <returns>True if the current range includes the specified position, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1TextRange.StartPosition">
            <summary>
            Gets or sets the 0-based start position in the text range.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1TextRange.Length">
            <summary>
            Gets or sets the length of the text range.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1TextRange.EndPosition">
            <summary>
            Gets or sets the end position (inclusive) of the text range.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.PagesLoadedEventArgs">
            <summary>
            Contains event data for events fired when some pages have been loaded and their content is available.
            Represents a contiguous range of pages defined by the first page's index, and the number of pages in the range.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PagesLoadedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the PagesLoadedEventArgs class
            with a specified page index, and one page.
            </summary>
            <param name="startIndex">0-based start page index.</param>
        </member>
        <member name="M:C1.Win.C1Document.PagesLoadedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the PagesLoadedEventArgs class
            with a specified page index and page count.
            </summary>
            <param name="startIndex">0-based start page index.</param>
            <param name="count">The number of loaded pages.</param>
        </member>
        <member name="P:C1.Win.C1Document.PagesLoadedEventArgs.StartIndex">
            <summary>
            Gets the 0-based index of the first page in the range represented by the current object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PagesLoadedEventArgs.Count">
            <summary>
            Gets the number of pages in the range represented by the current object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.PagesLoadedEventHandler">
            <summary>
            Defines a handler for the event fired when some pages have been loaded and their content is available.
            </summary>
            <param name="sender">The event source.</param>
            <param name="e">Data describing the event.</param>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentSourceException">
            <summary>
            Represents an exception that occurred in a <see cref="T:C1.Win.C1Document.C1DocumentSource"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSourceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1DocumentSourceException"/> class 
            with a specified error message.
            </summary>
            <param name="message">The exception error message.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSourceException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1DocumentSourceException"/> class 
            with a formatted error message.
            </summary>
            <param name="format">The exception message formatting string.</param>
            <param name="args">The list of parameters supplied to the formatting string.</param>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentSourceState">
            <summary>
            Specifies various possible states of a <see cref="T:C1.Win.C1Document.C1DocumentSource"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DocumentSourceState.Disposed">
            <summary>
            The <see cref="T:C1.Win.C1Document.C1DocumentSource"/> is disposed and cannot be used.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DocumentSourceState.Unknown">
            <summary>
            The <see cref="T:C1.Win.C1Document.C1DocumentSource"/> has just been created and has not been initialized yet.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DocumentSourceState.Opening">
            <summary>
            The <see cref="T:C1.Win.C1Document.C1DocumentSource"/> is currently opening.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DocumentSourceState.Opened">
            <summary>
            The <see cref="T:C1.Win.C1Document.C1DocumentSource"/> has been successfully opened and content can now be generated.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DocumentSourceState.ApplyingParameterValues">
            <summary>
            The <see cref="T:C1.Win.C1Document.C1DocumentSource"/> is currently assigning parameter values.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DocumentSourceState.ExecutingCustomAction">
            <summary>
            For internal use. The <see cref="T:C1.Win.C1Document.C1DocumentSource"/> is currently executing a custom action changing the content of the document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DocumentSourceState.Generating">
            <summary>
            The <see cref="T:C1.Win.C1Document.C1DocumentSource"/> is currently being generated. Not all content has been generated yet.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DocumentSourceState.Generated">
            <summary>
            The <see cref="T:C1.Win.C1Document.C1DocumentSource"/> has been successfully generated. All content is available.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DocumentSourceState.GeneratedWithErrors">
            <summary>
            The <see cref="T:C1.Win.C1Document.C1DocumentSource"/> generation has finished with errors.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DocumentSourceState.GenerationCancelled">
            <summary>
            The <see cref="T:C1.Win.C1Document.C1DocumentSource"/> generation was cancelled.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1FindTextParams">
            <summary>
            Represents find text parameters.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1FindTextParams.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1FindTextParams"/> class.
            </summary>
            <param name="text">The text to find.</param>
            <param name="wholeWord">Indicates whether to match whole words only.</param>
            <param name="matchCase">Indicates whether to match case.</param>
        </member>
        <member name="P:C1.Win.C1Document.C1FindTextParams.Text">
            <summary>
            Gets the text to find.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1FindTextParams.WholeWord">
            <summary>
            Gets a value indicating whether to match whole words only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1FindTextParams.MatchCase">
            <summary>
            Gets a value indicating whether to match case.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ParameterValueError">
            <summary>
            Represents a parameter value error.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ParameterValueError.#ctor(C1.Win.C1Document.Parameter,System.Object,System.String)">
            <summary>
            Initializes a new instance of the ParameterValueError class.
            </summary>
            <param name="parameter">The parameter associated with the error.</param>
            <param name="value">The erroneous value.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="P:C1.Win.C1Document.ParameterValueError.Parameter">
            <summary>
            Gets the parameter associated with the error.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ParameterValueError.Value">
            <summary>
            Gets the erroneous value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ParameterValueError.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1BookmarkPosition">
            <summary>
            Represents a position of a bookmark within a document.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1BookmarkPosition.#ctor(System.Int32,C1.Win.Interop.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1BookmarkPosition"/> class.
            </summary>
            <param name="pageIndex">The 0-based page index.</param>
            <param name="pageBounds">The bookmark's bounds on page.</param>
        </member>
        <member name="P:C1.Win.C1Document.C1BookmarkPosition.PageIndex">
            <summary>
            Gets the 0-based page index.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1BookmarkPosition.PageBounds">
            <summary>
            Gets the bookmark's bounds on page.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.CustomAction">
            <summary>
            Abstract base class for types representing actions 
            that can be performed on a document managed by a <see cref="T:C1.Win.C1Document.C1DocumentSource"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.SecurityException">
            <summary>
            Represents an exception caused by invalid credentials used while trying to connect to a document.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.SecurityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.SecurityException"/> class.
            </summary>
            <param name="path">The connection path that caused the exception.</param>
            <param name="ex">The inner exception which is the cause of the current exception, 
            or a null reference (Nothing in Visual Basic) if there is no associated inner exception.</param>
        </member>
        <member name="P:C1.Win.C1Document.SecurityException.Path">
            <summary>
            Gets the connection path that caused the current exception.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.SecurityErrorEventArgs">
            <summary>
            Defines parameters for a <see cref="E:C1.Win.C1Document.C1DocumentSource.SecurityError"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.SecurityErrorEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.SecurityErrorEventArgs"/> class.
            </summary>
            <param name="path">The connection path accessing which caused the security error.</param>
            <param name="failedAttemptCount">The number of failed open attempts.</param>
        </member>
        <member name="P:C1.Win.C1Document.SecurityErrorEventArgs.Path">
            <summary>
            Get the connection path accessing which caused the security error.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.SecurityErrorEventArgs.FailedAttemptCount">
            <summary>
            Gets the number of failed open attempts.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.SecurityErrorEventArgs.Retry">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:C1.Win.C1Document.C1DocumentSource"/> should retry 
            the operation which caused the security error.
            The default value is <b>false</b>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.SecurityErrorEventHandler">
            <summary>
            Represents a method that will handle a <see cref="E:C1.Win.C1Document.C1DocumentSource.SecurityError"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:C1.Win.C1Document.SecurityErrorEventArgs"/> object that contains event data.</param>
        </member>
        <member name="T:C1.Win.C1Document.ApplyParameterValuesCompletedEventArgs">
            <summary>
            Defines parameters for a <see cref="E:C1.Win.C1Document.C1DocumentSource.ApplyParameterValuesCompleted"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ApplyParameterValuesCompletedEventArgs.#ctor(System.Collections.Generic.List{C1.Win.C1Document.ParameterValueError},System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.ApplyParameterValuesCompletedEventArgs"/> class.
            </summary>
            <param name="errors">A list of <see cref="T:C1.Win.C1Document.ParameterValueError"/> objects describing the errors which occurred while setting parameters.</param>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="P:C1.Win.C1Document.ApplyParameterValuesCompletedEventArgs.Errors">
            <summary>
            Gets the list of <see cref="T:C1.Win.C1Document.ParameterValueError"/> objects describing the errors which occur during setting parameters.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ExecuteCustomActionCompletedEventArgs">
            <summary>
            Defines parameters for a <see cref="E:C1.Win.C1Document.C1DocumentSource.ExecuteCustomActionCompleted"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ExecuteCustomActionCompletedEventArgs.#ctor(C1.Win.C1Document.CustomAction,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.ExecuteCustomActionCompletedEventArgs"/> class.
            </summary>
            <param name="customAction">A <see cref="P:C1.Win.C1Document.ExecuteCustomActionCompletedEventArgs.CustomAction"/> object defining custom action executed in async operation.</param>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="P:C1.Win.C1Document.ExecuteCustomActionCompletedEventArgs.CustomAction">
            <summary>
            Gets the <see cref="P:C1.Win.C1Document.ExecuteCustomActionCompletedEventArgs.CustomAction"/> object defining custom action executed in the async operation.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.CheckParameterValuesCompletedEventArgs">
            <summary>
            Defines parameters for a <see cref="E:C1.Win.C1Document.C1DocumentSource.CheckParameterValuesCompleted"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.CheckParameterValuesCompletedEventArgs.#ctor(System.Collections.Generic.List{C1.Win.C1Document.ParameterValueError},System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.CheckParameterValuesCompletedEventArgs"/> class.
            </summary>
            <param name="parameterErrors">A list of <see cref="T:C1.Win.C1Document.ParameterValueError"/> objects describing the errors which occur during checking of parameter values.</param>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="P:C1.Win.C1Document.CheckParameterValuesCompletedEventArgs.ParameterErrors">
            <summary>
            Gets the list of <see cref="T:C1.Win.C1Document.ParameterValueError"/> objects describing the errors which occur during checking of parameter values.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.GetPageCompletedEventArgs">
            <summary>
            Defines parameters for a <see cref="E:C1.Win.C1Document.C1DocumentSource.GetPageCompleted"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.GetPageCompletedEventArgs.#ctor(System.Int32,C1.Win.C1Document.C1Page,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.GetPageCompletedEventArgs"/> class.
            </summary>
            <param name="pageIndex">An index of the page requested in async operation.</param>
            <param name="page">A <see cref="T:C1.Win.C1Document.C1Page"/> object representing result of operation.</param>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="P:C1.Win.C1Document.GetPageCompletedEventArgs.PageIndex">
            <summary>
            Gets the index of the page requested in the async operation.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.GetPageCompletedEventArgs.Page">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1Page"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.GetBookmarkPositionCompletedEventArgs">
            <summary>
            Defines parameters for a <see cref="E:C1.Win.C1Document.C1DocumentSource.GetBookmarkPositionCompleted"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.GetBookmarkPositionCompletedEventArgs.#ctor(System.String,C1.Win.C1Document.C1BookmarkPosition,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.GetBookmarkPositionCompletedEventArgs"/> class.
            </summary>
            <param name="bookmark">The name of the bookmark requested in async operation.</param>
            <param name="position">A <see cref="T:C1.Win.C1Document.C1BookmarkPosition"/> object representing the result of the operation.</param>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="P:C1.Win.C1Document.GetBookmarkPositionCompletedEventArgs.Bookmark">
            <summary>
            Gets the name of bookmark requested in the async operation.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.GetBookmarkPositionCompletedEventArgs.Position">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1BookmarkPosition"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.FindTextStartCompletedEventArgs">
            <summary>
            Defines parameters for a <see cref="E:C1.Win.C1Document.C1DocumentSource.FindTextStartCompleted"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.FindTextStartCompletedEventArgs.#ctor(System.Int32,System.Boolean,C1.Win.C1Document.C1FoundPosition,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.FindTextStartCompletedEventArgs"/> class.
            </summary>
            <param name="startPageIndex">0-based index of page where to start the search.</param>
            <param name="wholeDocument">Indicates whether all document should be loaded during searching.</param>
            <param name="position">A <see cref="T:C1.Win.C1Document.C1FoundPosition"/> object representing result of operation.</param>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="P:C1.Win.C1Document.FindTextStartCompletedEventArgs.StartPageIndex">
            <summary>
            0-based index of page where to start the search.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.FindTextStartCompletedEventArgs.WholeDocument">
            <summary>
            Gets a value indicating whether the whole document should be loaded for searching.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.FindTextStartCompletedEventArgs.Position">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1FoundPosition"/> object that specifies the found text position.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.FindTextNextCompletedEventArgs">
            <summary>
            Defines parameters for a <see cref="E:C1.Win.C1Document.C1DocumentSource.FindTextNextCompleted"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.FindTextNextCompletedEventArgs.#ctor(C1.Win.C1Document.C1FoundPosition,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.FindTextNextCompletedEventArgs"/> class.
            </summary>
            <param name="position">A <see cref="T:C1.Win.C1Document.C1FoundPosition"/> object representing result of operation.</param>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="P:C1.Win.C1Document.FindTextNextCompletedEventArgs.Position">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1FoundPosition"/> defining found text position.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.FindTextPreviousCompletedEventArgs">
            <summary>
            Defines parameters for a <see cref="E:C1.Win.C1Document.C1DocumentSource.FindTextPreviousCompleted"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.FindTextPreviousCompletedEventArgs.#ctor(C1.Win.C1Document.C1FoundPosition,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.FindTextPreviousCompletedEventArgs"/> class.
            </summary>
            <param name="position">A <see cref="T:C1.Win.C1Document.C1FoundPosition"/> object representing result of operation.</param>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="P:C1.Win.C1Document.FindTextPreviousCompletedEventArgs.Position">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1FoundPosition"/> defining found text position.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ExportCompletedEventArgs">
            <summary>
            Defines parameters for a <see cref="E:C1.Win.C1Document.C1DocumentSource.ExportCompleted"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ExportCompletedEventArgs.#ctor(C1.Win.C1Document.Export.Exporter,System.IO.Stream,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.ExportCompletedEventArgs"/> class.
            </summary>
            <param name="exporter">An <see cref="T:C1.Win.C1Document.Export.Exporter"/> object defining export parameters.</param>
            <param name="stream">Stream containing results of export.</param>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="P:C1.Win.C1Document.ExportCompletedEventArgs.Stream">
            <summary>
            Gets the stream containing results of export.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ExportCompletedEventArgs.Exporter">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.Export.Exporter"/> objectdefining export parameters.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IExecutionContext">
            <summary>
            Represents the context used to execute asynchronous operation of <see cref="T:C1.Win.C1Document.C1DocumentSource"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.IExecutionContext.OnLongOperation(System.Double)">
            <summary>
            Asynchronous method should call this method to notify about execution progress.
            </summary>
            <param name="done">Progress 0..1</param>
        </member>
        <member name="M:C1.Win.C1Document.IExecutionContext.Cancel">
            <summary>
            Called to cancel asynchronous method.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IExecutionContext.CancellationToken">
            <summary>
            <see cref="P:C1.Win.C1Document.IExecutionContext.CancellationToken"/> that can be passed to underlying task.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IExecutionContext.IsAbortRequested">
            <summary>
            Asynchronous method should throw <see cref="!:OperationCancelledException"/> if this flag becomes true.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentSource">
            <summary>
            Abstract base class for types that can create and manage a <see cref="T:C1.Win.C1Document.C1Document"/> object
            from some source.
            <para>Derived classes provide implementation for specific sources such as SSRS reports etc.</para>
            <para>The common base (C1DocumentSource) allows to work with various document and reports types
            (e.g. previewing or printing them) in a uniform manner.</para>
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1DocumentSource"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.#ctor(System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.Init">
            <summary>
            Called from constructor, initializes an object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.UpdateFindPageRange(C1.Win.C1Document.C1Page)">
            <summary>
            For internal use.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.ClearContent">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnLongOperation(System.Double)">
            <summary>
            For internal use.
            </summary>
            <param name="done"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnPagesLoaded(System.Int32,System.Int32)">
            <summary>
            For internal use.
            </summary>
            <param name="startIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnPagesClear">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnDirtyChanged">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnStateChanged">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnPageCountChanged">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnOpenCompleted(System.Exception)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnGenerateCompleted(System.Exception)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnApplyParameterValuesCompleted(System.Collections.Generic.List{C1.Win.C1Document.ParameterValueError},System.Exception)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnExecuteCustomActionCompleted(C1.Win.C1Document.CustomAction,System.Exception)">
            <summary>
            For internal use.
            </summary>
            <param name="customAction"></param>
            <param name="exception"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnCheckParameterValuesCompleted(System.Collections.Generic.List{C1.Win.C1Document.ParameterValueError},System.Exception,System.Boolean)">
            <summary>
            For internal use.
            </summary>
            <param name="errors"></param>
            <param name="exception"></param>
            <param name="cancelled"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnGetPageCompleted(System.Int32,C1.Win.C1Document.C1Page,System.Exception)">
            <summary>
            For internal use.
            </summary>
            <param name="pageIndex"></param>
            <param name="page"></param>
            <param name="exception"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnGetBookmarkPositionCompleted(System.String,C1.Win.C1Document.C1BookmarkPosition,System.Exception)">
            <summary>
            For internal use.
            </summary>
            <param name="bookmark"></param>
            <param name="position"></param>
            <param name="exception"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnFindTextStartCompleted(System.Int32,System.Boolean,C1.Win.C1Document.C1FoundPosition,System.Exception)">
            <summary>
            For internal use.
            </summary>
            <param name="startPageIndex"></param>
            <param name="wholeDocument"></param>
            <param name="position"></param>
            <param name="exception"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnFindTextNextCompleted(C1.Win.C1Document.C1FoundPosition,System.Exception)">
            <summary>
            For internal use.
            </summary>
            <param name="position"></param>
            <param name="exception"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnFoundPositionsChanged">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnFindTextPreviousCompleted(C1.Win.C1Document.C1FoundPosition,System.Exception)">
            <summary>
            For internal use.
            </summary>
            <param name="position"></param>
            <param name="exception"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnExportCompleted(C1.Win.C1Document.Export.Exporter,System.IO.Stream,System.Exception)">
            <summary>
            For internal use.
            </summary>
            <param name="exporter"></param>
            <param name="stream"></param>
            <param name="exception"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OnSecurityError(System.String,System.Int32)">
            <summary>
            For internal use.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.FirePageCountChanged">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalOpen(C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalGenerate(C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalApplyParameterValues(System.Collections.Generic.Dictionary{C1.Win.C1Document.Parameter,System.Object},System.Collections.Generic.List{C1.Win.C1Document.ParameterValueError},C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="actualValues"></param>
            <param name="errors"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalExecuteCustomAction(C1.Win.C1Document.CustomAction,C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="action"></param>
            <returns><see cref="T:C1.Win.C1Document.C1BookmarkPosition"/> object specifies position in document where viewer should be positioned when method finished.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalCheckParameterValues(System.Collections.Generic.Dictionary{C1.Win.C1Document.Parameter,System.Object},System.Collections.Generic.List{C1.Win.C1Document.ParameterValueError},C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="actualValues"></param>
            <param name="errors"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalGetBookmarkPosition(System.String,C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="bookmark"></param>
            <param name="context"></param>
            <returns><see cref="T:C1.Win.C1Document.C1BookmarkPosition"/> object specifies position of requested bookmark.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalGetPage(System.Int32,System.Boolean,C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="pageIndex"></param>
            <param name="updateFindRange"></param>
            <param name="context"></param>
            <returns><see cref="T:C1.Win.C1Document.C1Page"/> object defines page of document.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalExport(C1.Win.C1Document.Export.Exporter,System.IO.Stream,C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="exporter"></param>
            <param name="stream"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalCancel">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalDispose">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.Open(C1.Win.C1Document.C1DocumentLocation)">
            <summary>
            Opens the document from the specified location.
            <para>After this call you can access the list of parameters, or generate the document to fill the pages.</para>
            <para>Note that this call is blocking (synchronous). 
            See <see cref="M:C1.Win.C1Document.C1DocumentSource.OpenAsync(C1.Win.C1Document.C1DocumentLocation)"/> for the non-blocking (asynchronous) version of this method.</para>
            </summary>
            <param name="documentLocation">The document location to open.</param>
            <seealso cref="M:C1.Win.C1Document.C1DocumentSource.Open"/>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OpenAsyncEx(C1.Win.C1Document.C1DocumentLocation)">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.Open(C1.Win.C1Document.C1DocumentLocation)"/> method.
            </summary>
            <seealso cref="M:C1.Win.C1Document.C1DocumentSource.Open(C1.Win.C1Document.C1DocumentLocation)"/>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OpenAsyncEx">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.Open"/> method.
            </summary>
            <seealso cref="M:C1.Win.C1Document.C1DocumentSource.Open"/>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.Open">
            <summary>
            Opens the document from the location specified by the <see cref="P:C1.Win.C1Document.C1DocumentSource.DocumentLocation"/> property.
            <para>After this call you can access the list of parameters, or generate the document to fill the pages.</para>
            <para>Note that this call is blocking (synchronous). 
            See <see cref="M:C1.Win.C1Document.C1DocumentSource.OpenAsync"/> for the non-blocking (asynchronous) version of this method.</para>
            </summary>
            <seealso cref="M:C1.Win.C1Document.C1DocumentSource.Open(C1.Win.C1Document.C1DocumentLocation)"/>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OpenAsync">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.Open"/> method.
            </summary>
            <seealso cref="M:C1.Win.C1Document.C1DocumentSource.Open"/>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.OpenAsync(C1.Win.C1Document.C1DocumentLocation)">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.Open(C1.Win.C1Document.C1DocumentLocation)"/> method.
            </summary>
            <seealso cref="M:C1.Win.C1Document.C1DocumentSource.Open(C1.Win.C1Document.C1DocumentLocation)"/>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.Generate">
            <summary>
            Generates the document.
            The document must be opened prior to this call.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GenerateAsyncEx">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.Generate"/> method.
            </summary>
            <seealso cref="M:C1.Win.C1Document.C1DocumentSource.Generate"/>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GenerateAsync">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.Generate"/> method.
            </summary>
            <seealso cref="M:C1.Win.C1Document.C1DocumentSource.Generate"/>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.ApplyParameterValues">
            <summary>
            Applies parameter values specified in <see cref="P:C1.Win.C1Document.C1DocumentSource.Parameters"/>, as current values.
            Returns the list of errors which occurred while checking the paremeters, or null or an empty
            list if there were no errors.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.ApplyParameterValuesAsyncEx">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.ApplyParameterValues"/> method.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.ApplyParameterValuesAsync">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.ApplyParameterValues"/> method.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.ExecuteCustomAction(C1.Win.C1Document.CustomAction)">
            <summary>
            For internal use only.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.ExecuteCustomActionAsyncEx(C1.Win.C1Document.CustomAction)">
            <summary>
            For internal use only.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.ExecuteCustomActionAsync(C1.Win.C1Document.CustomAction)">
            <summary>
            For internal use only.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.CheckParameterValues">
            <summary>
            Checks (validates) the current parameter values, refreshes their valid values' lists if the values are valid.
            </summary>
            <returns>The list of <see cref="T:C1.Win.C1Document.ParameterValueError"/> objects identifying any errors (may be empty or null).</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.CheckParameterValuesAsync">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.CheckParameterValues"/> method.
            </summary>
            <returns>The asynchronous list of <see cref="T:C1.Win.C1Document.ParameterValueError"/> objects identifying any errors (may be empty).</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.Win.C1Document.C1DocumentSource.CheckParameterValuesAsyncEx" -->
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetPage(System.Int32)">
            <summary>
            Fetches a page with the specified index.
            </summary>
            <param name="pageIndex">0-based page index.</param>
            <returns>The <see cref="T:C1.Win.C1Document.C1Page"/> object representing the requested page.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetPageAsync(System.Int32)">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.GetPage(System.Int32)"/> method.
            </summary>
            <param name="pageIndex">0-based page index.</param>
            <returns>The asynchronous <see cref="T:C1.Win.C1Document.C1Page"/> object representing the requested page.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetPageAsyncEx(System.Int32)">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.GetPage(System.Int32)"/> method.
            </summary>
            <param name="pageIndex">0-based page index.</param>
            <returns>The asynchronous <see cref="T:C1.Win.C1Document.C1Page"/> object representing the requested page.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetLoadedPage(System.Int32)">
            <summary>
            Fetches a generated page with the specified index,
            or null if the requested page has not been generated yet.
            </summary>
            <param name="pageIndex">0-based page index.</param>
            <returns>The <see cref="T:C1.Win.C1Document.C1Page"/> object representing the requested page, or null.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.IsPageLoading(System.Int32)">
            <summary>
            Checkes whether a page with the specified index has already been requested,
            i.e. the <see cref="M:C1.Win.C1Document.C1DocumentSource.GetPageAsync(System.Int32)"/> method has been called to fetch it.
            </summary>
            <param name="pageIndex">0-based page index.</param>
            <returns><b>true</b> if page is currently loading, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetBookmarkPosition(System.String)">
            <summary>
            Gets the position of a bookmark in the document.
            </summary>
            <param name="bookmark">The requested bookmark.</param>
            <returns>The requested bookmark's position.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.Win.C1Document.C1DocumentSource.GetBookmarkPositionAsyncEx(System.String)" -->
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetBookmarkPositionAsync(System.String)">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.GetBookmarkPosition(System.String)"/> method.
            </summary>
            <param name="bookmark">The requested bookmark.</param>
            <returns>The asynchronous requested bookmark's position.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalFindTextStart(System.Int32,System.Boolean,C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="startPageIndex"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.FindTextStart(System.Int32,System.Boolean,C1.Win.C1Document.C1FindTextParams)">
            <summary>
            Finds the first occurrence of a text in the document.
            </summary>
            <param name="startPageIndex">0-based index of page where to start the search.</param>
            <param name="wholeDocument">Indicates whether whole document should be loaded during searching or to the first fragment found.</param>
            <param name="findParams">Find text parameters.</param>
            <returns>The found text position.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.Win.C1Document.C1DocumentSource.FindTextStartAsyncEx(System.Int32,System.Boolean,C1.Win.C1Document.C1FindTextParams)" -->
        <member name="M:C1.Win.C1Document.C1DocumentSource.FindTextStartAsync(System.Int32,System.Boolean,C1.Win.C1Document.C1FindTextParams)">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.FindTextStartAsync(System.Int32,System.Boolean,C1.Win.C1Document.C1FindTextParams)"/> method.
            </summary>
            <param name="startPageIndex">0-based index of page where to start the search.</param>
            <param name="wholeDocument">Indicates whether whole document should be loaded during searching or to the first fragment found.</param>
            <param name="findParams">Find text parameters.</param>
            <returns>Asynchronous object representing the found text position.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.InternalFindTextNext(C1.Win.C1Document.C1FoundPosition,C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.FindTextNext(C1.Win.C1Document.C1FoundPosition)">
            <summary>
            Finds the next occurrence of a text in the document.
            </summary>
            <param name="foundPosition"><see cref="T:C1.Win.C1Document.C1FoundPosition"/> object defines the position from which the search should be started.</param>
            <returns>The found text position.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.Win.C1Document.C1DocumentSource.FindTextNextAsyncEx(C1.Win.C1Document.C1FoundPosition)" -->
        <member name="M:C1.Win.C1Document.C1DocumentSource.FindTextNextAsync(C1.Win.C1Document.C1FoundPosition)">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="!:FindTextNext()"/> method.
            </summary>
            <param name="foundPosition"><see cref="T:C1.Win.C1Document.C1FoundPosition"/> object defines the position from which the search should be started.</param>
            <returns>Asynchronous object representing the found text position.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.FindTextPrevious(C1.Win.C1Document.C1FoundPosition)">
            <summary>
            Finds the previous occurrence of a text in the document.
            </summary>
            <param name="foundPosition"><see cref="T:C1.Win.C1Document.C1FoundPosition"/> object defines the position from which the search should be started.</param>
            <returns>The found text position.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.Win.C1Document.C1DocumentSource.FindTextPreviousAsyncEx(C1.Win.C1Document.C1FoundPosition)" -->
        <member name="M:C1.Win.C1Document.C1DocumentSource.FindTextPreviousAsync(C1.Win.C1Document.C1FoundPosition)">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="!:FindTextPrevious()"/> method.
            </summary>
            <param name="foundPosition"><see cref="T:C1.Win.C1Document.C1FoundPosition"/> object defines the position from which the search should be started.</param>
            <returns>Asynchronous object representing the found text position.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.NewExporter(C1.Win.C1Document.Export.ExportProvider)">
            <summary>
            Creates and initializes an exporter for the specified format.
            </summary>
            <param name="exportProvider">The export provider identifying the target format.</param>
            <returns>The created exporter object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.Export(C1.Win.C1Document.Export.Exporter,System.IO.Stream)">
            <summary>
            Exports the document into a stream in an external format using the specified exporter.
            </summary>
            <param name="exporter">The exporter to use.</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.ExportAsyncEx(C1.Win.C1Document.Export.Exporter,System.IO.Stream)">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.Export(C1.Win.C1Document.Export.Exporter,System.IO.Stream)"/> method.
            </summary>
            <param name="exporter">The exporter to use.</param>
            <param name="stream">The output stream.</param>
            <returns>Asynchronous value object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.ExportAsync(C1.Win.C1Document.Export.Exporter,System.IO.Stream)">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.Export(C1.Win.C1Document.Export.Exporter,System.IO.Stream)"/> method.
            </summary>
            <param name="exporter">The exporter to use.</param>
            <param name="stream">The output stream.</param>
            <returns>Asynchronous value object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.Export(C1.Win.C1Document.Export.ExportProvider,System.IO.Stream)">
            <summary>
            Exports the document into a stream in an external format using the specified export provider.
            </summary>
            <param name="exportProvider">The export provider used to create the exporter (see <see cref="M:C1.Win.C1Document.C1DocumentSource.NewExporter(C1.Win.C1Document.Export.ExportProvider)"/> method).</param>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.ExportAsync(C1.Win.C1Document.Export.ExportProvider,System.IO.Stream)">
            <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.Win.C1Document.C1DocumentSource.Export(C1.Win.C1Document.Export.ExportProvider,System.IO.Stream)"/> method.
            </summary>
            <param name="exportProvider">The export provider used to create the exporter (see <see cref="M:C1.Win.C1Document.C1DocumentSource.NewExporter(C1.Win.C1Document.Export.ExportProvider)"/> method).</param>
            <param name="stream">The output stream.</param>
            <returns>Asynchronous value object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.FindTextReset">
            <summary>
            Resets text search results.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.Clear">
            <summary>
            Clear generated content and reset <see cref="P:C1.Win.C1Document.C1DocumentSource.State"/> to <see cref="F:C1.Win.C1Document.C1DocumentSourceState.Opened"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.Cancel">
            <summary>
            Cancels currently executed action.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetHitTestAction(C1.Win.C1Document.HitTestInfo)">
            <summary>
            Gets the custom action associated with a hit test info, or null.
            </summary>
            <param name="hti">The hit test info to check.</param>
            <returns>The custom action, or null.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetDocumentRange(C1.Win.C1Document.C1DocumentTextPosition,C1.Win.C1Document.C1DocumentTextPosition)">
            <summary>
            Creates the <see cref="T:C1.Win.C1Document.C1DocumentRange"/> object on the base of two text positions specified
            by <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> objects.
            </summary>
            <param name="startPosition">Start position for the document range.</param>
            <param name="endPosition">End position for the document range.</param>
            <returns><see cref="T:C1.Win.C1Document.C1DocumentRange"/> defining document range.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetWordDocumentRange(C1.Win.C1Document.C1DocumentTextPosition)">
            <summary>
            Creates a <see cref="T:C1.Win.C1Document.C1DocumentRange"/> object that defines a word containing a specified position in the document.
            </summary>
            <param name="position">A <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> object specifying the text position.</param>
            <returns>A <see cref="T:C1.Win.C1Document.C1DocumentRange"/> that defines the word that contains or is near the specified <paramref name="position"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetPageMetafiles(System.Func{System.Boolean})">
            <summary>
            For internal use only.
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.GetContextLocation">
            <summary>
            Returns a  <see cref="T:C1.Win.C1Document.C1DocumentLocation"/> object representing the current state of the <see cref="T:C1.Win.C1Document.C1DocumentSource"/>.
            </summary>
            <returns>The <see cref="T:C1.Win.C1Document.C1DocumentLocation"/> object representing the current state of this document source.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.CreateDocumentSource(C1.Win.C1Document.C1DocumentLocation)">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.C1DocumentSource"/> class
            with the specified document location.
            </summary>
            <param name="dl">The location of the document to create.</param>
            <returns>The newly created document source.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.SyncObject">
            <summary>
            Gets an object used by this <see cref="T:C1.Win.C1Document.C1DocumentSource"/> object
            to synchronize asynchronious operations. All async methds like
            InitializeAsync GenerateAsync executed as: lock(SyncObject) { ... }.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.AsyncMethodsUseAwaitPattern">
            <summary>
            Gets or sets a value indicating whether calls to the async methods of the current document source expect the async/await pattern to be used by the calling code.
            If this property is true, then the *Completed events (such as <see cref="E:C1.Win.C1Document.C1DocumentSource.OpenCompleted"/>, <see cref="E:C1.Win.C1Document.C1DocumentSource.GenerateCompleted"/> and others)
            do not fire.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.Dirty">
            <summary>
            Gets a value indicating whether the current content is dirty and does not correspond to the current values of
            <see cref="P:C1.Win.C1Document.C1DocumentSource.DocumentLocation"/>, <see cref="P:C1.Win.C1Document.C1DocumentSource.Paginated"/> etc.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.SupportedExporters">
            <summary>
            Gets an array of exporters supported by the current document source object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.IsDisposed">
            <summary>
            Gets a value indicating whether the current document source object has been disposed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.Document">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.C1Document"/> object produced by the current document source.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.IsCurrentActionCancellable">
            <summary>
            Gets a value indicating whether the current action can be cancelled.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.PageCount">
            <summary>
            Gets the number of already generated pages.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.HasParameters">
            <summary>
            Gets a value indicating whether any parameters have been specified.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.State">
            <summary>
            Gets a value representing the current state of the document source.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.Paginated">
            <summary>
            Gets or sets a value indicating whether the content should be represented as set of fixed sized pages.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.PageLayout">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Document.C1DocumentSource.PageLayout"/> object specifying the page layout to use when
            generating a paginated document (see <see cref="P:C1.Win.C1Document.C1DocumentSource.Paginated"/>).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.Parameters">
            <summary>
            Gets a collection of parameters used to generate content.
            This collection is initializated in the <see cref="M:C1.Win.C1Document.C1DocumentSource.Open"/> method.
            The <see cref="M:C1.Win.C1Document.C1DocumentSource.ApplyParameterValues"/> method has to be called
            for the values specified in this collection to be actually used as the parameters.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.DocumentLocation">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.C1DocumentLocation"/> object specifying the location of the document 
            currently opened by the current document source.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.Credential">
            <summary>
            Gets or sets the <see cref="T:System.Net.NetworkCredential"/> object specifying the credentials
            which will be used to access data for document generation.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.SelectedRange">
            <summary>
            Gets or sets the current selected range of the document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.SelectionHighlight">
            <summary>
            Gets or sets the attributes used to highlight selected area in the document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.FindMatchHighlight">
            <summary>
            Gets or sets attributes used to highlight searched text.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.ActiveFindMatchHighlight">
            <summary>
            Gets or sets attributes used to highlight the current find match.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.FoundPositions">
            <summary>
            Gets the list of <see cref="T:C1.Win.C1Document.C1FoundPosition"/> objects representing result of the current search.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.ActiveFoundPosition">
            <summary>
            Gets or sets the active found position which is highlighted.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.IsUserInteractive">
            <summary>
            Gets a value indicating whether the current document source is running in a user-interactive environment.
            This property returns false when running in a service, web app and so on.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.FoundPositionsChanged">
            <summary>
            Occurs when the <see cref="P:C1.Win.C1Document.C1DocumentSource.FoundPositions"/> list is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.OpenCompleted">
            <summary>
            Occurs when the <see cref="M:C1.Win.C1Document.C1DocumentSource.OpenAsync"/> method or any of its overloads has completed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.GenerateCompleted">
            <summary>
            Occurs when the <see cref="M:C1.Win.C1Document.C1DocumentSource.GenerateAsync"/> method has completed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.ApplyParameterValuesCompleted">
            <summary>
            Occurs when the <see cref="M:C1.Win.C1Document.C1DocumentSource.ApplyParameterValuesAsync"/> method has completed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.ExecuteCustomActionCompleted">
            <summary>
            Occurs when the <see cref="M:C1.Win.C1Document.C1DocumentSource.ExecuteCustomActionAsync(C1.Win.C1Document.CustomAction)"/> method has completed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.CheckParameterValuesCompleted">
            <summary>
            Occurs when the <see cref="M:C1.Win.C1Document.C1DocumentSource.CheckParameterValuesAsync"/> method has completed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.GetPageCompleted">
            <summary>
            Occurs when the <see cref="M:C1.Win.C1Document.C1DocumentSource.GetPageAsync(System.Int32)"/> method has completed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.GetBookmarkPositionCompleted">
            <summary>
            Occurs when the <see cref="M:C1.Win.C1Document.C1DocumentSource.GetBookmarkPositionAsync(System.String)"/> method has completed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.FindTextStartCompleted">
            <summary>
            Occurs when the <see cref="M:C1.Win.C1Document.C1DocumentSource.FindTextStartAsync(System.Int32,System.Boolean,C1.Win.C1Document.C1FindTextParams)"/> method has completed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.FindTextNextCompleted">
            <summary>
            Occurs when the <see cref="M:C1.Win.C1Document.C1DocumentSource.FindTextNextAsync(C1.Win.C1Document.C1FoundPosition)"/> method has completed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.FindTextPreviousCompleted">
            <summary>
            Occurs when the <see cref="M:C1.Win.C1Document.C1DocumentSource.FindTextPreviousAsync(C1.Win.C1Document.C1FoundPosition)"/> method has completed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.ExportCompleted">
            <summary>
            Occurs when the <see cref="M:C1.Win.C1Document.C1DocumentSource.Export(C1.Win.C1Document.Export.Exporter,System.IO.Stream)"/> or the <see cref="M:C1.Win.C1Document.C1DocumentSource.Export(C1.Win.C1Document.Export.ExportProvider,System.IO.Stream)"/> method has completed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.StateChanged">
            <summary>
            Occurs when the <see cref="P:C1.Win.C1Document.C1DocumentSource.State"/> property value changes. 
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.DirtyChanged">
            <summary>
            Occurs when the <see cref="P:C1.Win.C1Document.C1DocumentSource.Dirty"/> property value changes. 
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.LongOperation">
            <summary>
            Occurs periodically during various document operations.
            Allows to provide progress indication and the ability to cancel some long operations such as document generation.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.PageCountChanged">
            <summary>
            Occurs when the <see cref="P:C1.Win.C1Document.C1DocumentSource.PageCount"/> property value changes. 
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.PagesLoaded">
            <summary>
            Occurs when the content of some pages is loaded.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.PagesClear">
            <summary>
            Occurs when the pages are cleared.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.C1DocumentSource.SecurityError">
            <summary>
            Occurs when a securiy exception occurs during a document source operation.
            This event allows to correct security-related properties like <see cref="T:System.Net.NetworkCredential"/>
            and retry a failed operation with new credentials.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentSource.C1FoundPositions">
            <summary>
            Helper class provides access to list of the found text fragments.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentSource.Activities">
            <summary>
            Contains references to activities managed by the <see cref="T:C1.Win.C1Document.C1DocumentSource"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.Activities.Cancel">
            <summary>
            Cancels all activites.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentSource.ActivityBase">
            <summary>
            Base class for all async actions which can be performed in parallel with document generation.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IAsyncInfo">
            <summary>
            Supports asynchronous actions and operations.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.IAsyncInfo.Cancel">
            <summary>
            Cancels the asynchronous operation.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.IAsyncInfo.Close">
            <summary>
            Closes the asynchronous operation.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IAsyncInfo.Status">
            <summary>
            Gets a value that indicates the status of the asynchronous operation.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IAsyncInfo.ErrorCode">
            <summary>
            Gets an exception occurs in the asynchronous operation.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IAsyncInfo.Id">
            <summary>
            Gets the handle of the asynchronous operation.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.ActivityBase.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:C1.Win.C1Document.C1DocumentSource.Activity"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1DocumentSource.ActivityBase.Cancel">
            <summary>
            Cancels this activity.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentSource.Activity">
            <summary>
            Base class for all async actions.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IAsyncActionWithProgress`1">
            <summary>
            Represents an asynchronous action that includes progress updates.
            </summary>
            <typeparam name="TProgress">The type of the progress data.</typeparam>
        </member>
        <member name="M:C1.Win.C1Document.IAsyncActionWithProgress`1.GetResults">
            <summary>
            Returns the results of the action.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IAsyncActionWithProgress`1.Progress">
            <summary>
            Gets or sets the method that receives progress events.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IAsyncActionWithProgress`1.Completed">
            <summary>
            Gets or sets the method that handles the action completed event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.Activity.Task">
            <summary>
            Gets the task object executing in this activity.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DocumentSource.Activity`1">
            <summary>
            Base class for all async operation returning result.
            </summary>
            <typeparam name="TResult">The type of the activity result.</typeparam>
        </member>
        <member name="T:C1.Win.C1Document.IAsyncOperationWithProgress`2">
            <summary>
            Represents an asynchronous operation that includes progress updates.
            </summary>
            <typeparam name="TProgress">The type of the progress data.</typeparam>
        </member>
        <member name="M:C1.Win.C1Document.IAsyncOperationWithProgress`2.GetResults">
            <summary>
            Returns the results of the action.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IAsyncOperationWithProgress`2.Progress">
            <summary>
            Gets or sets the method that receives progress events.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IAsyncOperationWithProgress`2.Completed">
            <summary>
            Gets or sets the method that handles the action completed event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DocumentSource.Activity`1.Task">
            <summary>
            Gets the task object executing in this activity.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1RplImportException">
            <summary>
            Represents an exception that occurred during RPL import.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1RplImportException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the C1RplImportException class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1RplImportException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the C1RplImportException class.
            </summary>
            <param name="format">A format string used to format the exception message.</param>
            <param name="args">A list of arguments passed to the format string.</param>
        </member>
        <member name="T:C1.Win.C1Document.SSRSReportLocationBase">
            <summary>
            Abstract base class for types representing the location of an SSRS report.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.SSRSReportLocationBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.SSRSReportLocationBase"/> class.
            </summary>
            <param name="reportServer">Address of the SSRS server.</param>
        </member>
        <member name="P:C1.Win.C1Document.SSRSReportLocationBase.ReportServer">
            <summary>
            Gets an address of the SSRS server, like "http://someaddress/ReportServer".
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.SSRSReportLocation">
            <summary>
            Represents the location of an SSRS report specified by a full path to the report on a server.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.SSRSReportLocation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.SSRSReportLocation"/> class.
            </summary>
            <param name="reportServer">Address of the SSRS server.</param>
            <param name="reportPath">Full path to the report on the server.</param>
        </member>
        <member name="M:C1.Win.C1Document.SSRSReportLocation.ToString">
            <summary>
            Converts the current report location to a string representation.
            </summary>
            <returns>The string representing the current object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.SSRSReportLocation.GetHashCode">
            <summary>
            Returns the hash code for this report location.
            </summary>
            <returns>The hash code for this report location.</returns>
        </member>
        <member name="M:C1.Win.C1Document.SSRSReportLocation.Equals(System.Object)">
            <summary>
            Compares the current report location to another one.
            </summary>
            <param name="obj">The other report location object to compare the current to.</param>
            <returns>True if both objects represent the same location, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.SSRSReportLocation.ReportPath">
            <summary>
            Gets a full path to the report on the server.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.SSRSReportLocation.TypeConverter">
            <summary>
            Provides <see cref="T:C1.Win.C1Document.SSRSReportLocation.TypeConverter"/> for the <see cref="T:C1.Win.C1Document.SSRSReportLocation"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.SSRSReportLocation.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Tests whether an object of the specified type can be converted to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="type">A <see cref="T:System.Type"/> that represents the type to convert from.</param>
            <returns>True if this converter can perform the conversion, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.SSRSReportLocation.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The object to convert.</param>
            <param name="type">The <see cref="T:System.Type"/> to convert the <i>value</i> parameter to.</param>
            <returns>An <b>Object</b> that represents the converted value.</returns>
        </member>
        <member name="T:C1.Win.C1Document.SSRSDrillthroughReportLocation">
            <summary>
            Represents the location of an SSRS report specified via execution ID of master report and ID of the drillthrough report.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.SSRSDrillthroughReportLocation.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.SSRSDrillthroughReportLocation"/> class.
            </summary>
            <param name="reportServer">Address of the server.</param>
            <param name="executionID">Execution ID of the master report.</param>
            <param name="drillthroughID">ID of the drillthrough report.</param>
        </member>
        <member name="M:C1.Win.C1Document.SSRSDrillthroughReportLocation.GetHashCode">
            <summary>
            Returns the hash code for this report location.
            </summary>
            <returns>The hash code for this report location.</returns>
        </member>
        <member name="M:C1.Win.C1Document.SSRSDrillthroughReportLocation.Equals(System.Object)">
            <summary>
            Compares the current report location to another one.
            </summary>
            <param name="obj">The other report location object to compare the current to.</param>
            <returns>True if both objects represent the same location, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.SSRSDrillthroughReportLocation.ExecutionID">
            <summary>
            Gets the execution ID of the master report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.SSRSDrillthroughReportLocation.DrillthroughID">
            <summary>
            Gets the drillthrough report ID.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.SSRSDrillthroughReportLocation.TypeConverter">
            <summary>
            Provides <see cref="T:C1.Win.C1Document.SSRSDrillthroughReportLocation.TypeConverter"/> for the <see cref="T:C1.Win.C1Document.SSRSDrillthroughReportLocation"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.SSRSDrillthroughReportLocation.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Tests whether an object of the specified type can be converted to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="type">A <see cref="T:System.Type"/> that represents the type to convert from.</param>
            <returns>True if this converter can perform the conversion, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.SSRSDrillthroughReportLocation.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The object to convert.</param>
            <param name="type">The <see cref="T:System.Type"/> to convert the <i>value</i> parameter to.</param>
            <returns>An <b>Object</b> that represents the converted value.</returns>
        </member>
        <member name="T:C1.Win.C1Document.SSRSSessionReportLocation">
            <summary>
            Represents the location of an SSRS report specified by a report session ID.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.SSRSSessionReportLocation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.SSRSSessionReportLocation"/> class.
            </summary>
            <param name="reportServer">Address of the server.</param>
            <param name="sessionID">Session ID of the report.</param>
        </member>
        <member name="M:C1.Win.C1Document.SSRSSessionReportLocation.GetHashCode">
            <summary>
            Returns the hash code for this report location.
            </summary>
            <returns>The hash code for this report location.</returns>
        </member>
        <member name="M:C1.Win.C1Document.SSRSSessionReportLocation.Equals(System.Object)">
            <summary>
            Compares the current report location to another one.
            </summary>
            <param name="obj">The other report location object to compare the current to.</param>
            <returns>True if both objects represent the same location, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.SSRSSessionReportLocation.SessionID">
            <summary>
            Gets the session ID.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.SSRSSessionReportLocation.TypeConverter">
            <summary>
            Provides <see cref="T:C1.Win.C1Document.SSRSSessionReportLocation.TypeConverter"/> for the <see cref="T:C1.Win.C1Document.SSRSSessionReportLocation"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.SSRSSessionReportLocation.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Tests whether an object of the specified type can be converted to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="type">A <see cref="T:System.Type"/> that represents the type to convert from.</param>
            <returns>True if this converter can perform the conversion, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.SSRSSessionReportLocation.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The object to convert.</param>
            <param name="type">The <see cref="T:System.Type"/> to convert the <i>value</i> parameter to.</param>
            <returns>An <b>Object</b> that represents the converted value.</returns>
        </member>
        <member name="T:C1.Win.C1Document.C1SSRSDocumentSource">
            <summary>
            Represents a document source which can be used to generate an SSRS report.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.PdfExportProvider">
            <summary>
            Gets the static registered instance of the PDF export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.CsvExportProvider">
            <summary>
            Gets the static registered instance of the CSV export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.BmpExportProvider">
            <summary>
            Gets the static registered instance of the BMP export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.EmfExportProvider">
            <summary>
            Gets the static registered instance of the EMF export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.GifExportProvider">
            <summary>
            Gets the static registered instance of the GIF export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.JpegExportProvider">
            <summary>
            Gets the static registered instance of the JPEG export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.PngExportProvider">
            <summary>
            Gets the static registered instance of the PNG export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.TiffExportProvider">
            <summary>
            Gets the static registered instance of the TIFF export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.ExcelExportProvider">
            <summary>
            Gets the static registered instance of the Excel export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.WordExportProvider">
            <summary>
            Gets the static registered instance of the Word export provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.MhtmlExportProvider">
            <summary>
            Gets the static registered instance of the Excel export provider.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1SSRSDocumentSource"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.#ctor(System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.GetUniqueName(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="pageIndex">0-based page index.</param>
            <param name="uniqueName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.ResetDocumentLocation">
            <summary>
            Resets the DocumentLocation property to the default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.ShouldSerializeDocumentLocation">
            <summary>
            Indicates whether the <see cref="P:C1.Win.C1Document.C1SSRSDocumentSource.DocumentLocation"/> property should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.Win.C1Document.C1SSRSDocumentSource.DocumentLocation"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.ShouldSerializeConnectionOptions">
            <summary>
            Indicates whether the <see cref="P:C1.Win.C1Document.C1SSRSDocumentSource.ConnectionOptions"/> property should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.Win.C1Document.C1SSRSDocumentSource.ConnectionOptions"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.Init">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.ClearContent">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.InternalDispose">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.InternalOpen(C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.InternalCheckParameterValues(System.Collections.Generic.Dictionary{C1.Win.C1Document.Parameter,System.Object},System.Collections.Generic.List{C1.Win.C1Document.ParameterValueError},C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="actualValues"></param>
            <param name="errors"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.InternalApplyParameterValues(System.Collections.Generic.Dictionary{C1.Win.C1Document.Parameter,System.Object},System.Collections.Generic.List{C1.Win.C1Document.ParameterValueError},C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="actualValues"></param>
            <param name="errors"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.InternalGenerate(C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.InternalGetPage(System.Int32,System.Boolean,C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="pageIndex"></param>
            <param name="updateFindRange"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.InternalGetBookmarkPosition(System.String,C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="bookmark"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.InternalExecuteCustomAction(C1.Win.C1Document.CustomAction,C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="action"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.InternalExport(C1.Win.C1Document.Export.Exporter,System.IO.Stream,C1.Win.C1Document.IExecutionContext)">
            <summary>
            For internal use.
            </summary>
            <param name="exporter"></param>
            <param name="stream"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.NewExporter(C1.Win.C1Document.Export.ExportProvider)">
            <summary>
            Overridden. Creates and initializes an exporter for the specified format.
            </summary>
            <param name="exportProvider">The <see cref="T:C1.Win.C1Document.Export.ExportProvider"/> identifying the target format.</param>
            <returns>The created <see cref="T:C1.Win.C1Document.Export.Exporter"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.GetHitTestAction(C1.Win.C1Document.HitTestInfo)">
            <summary>
            Overridden. Gets the custom action associated with a hit test info, or null.
            </summary>
            <param name="hti">The hit test info to check.</param>
            <returns>The custom action, or null.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.GetLoadedPage(System.Int32)">
            <summary>
            Overridden. Fetches a generated page with the specified index,
            or null if the requested page has not been generated yet.
            </summary>
            <param name="pageIndex">0-based page index.</param>
            <returns>The <see cref="T:C1.Win.C1Document.C1Page"/> object representing the requested page, or null.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.SupportedExporters">
            <summary>
            Overridden. Gets an array of exporters supported by the current document source object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.Document">
            <summary>
            Overridden. Gets a <see cref="T:C1.Win.C1Document.C1Document"/> object representing the SSRS report
            associated with the current document source.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.IsCurrentActionCancellable">
            <summary>
            Overridden. Gets a value indicating whether the current action can be cancelled.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.ReportSession">
            <summary>
            Gets the <see cref="T:C1.Win.C1Ssrs.ReportSession"/> object used to connect to SSRS report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.Credential">
            <summary>
            Overridden. Gets or sets <see cref="T:System.Net.NetworkCredential"/> object defining credentials used in the SSRS connection.
            This is a shortcut to <see cref="P:C1.Win.C1Ssrs.ConnectionOptions.Credential"/>.
            
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.DocumentLocation">
            <summary>
            Gets or sets the location of the SSRS report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.ConnectionOptions">
            <summary>
            Gets the <see cref="T:C1.Win.C1Ssrs.ConnectionOptions"/> object containing options used when connecting to SSRS.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1SSRSDocumentSource.ToggleItemAction">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.ToggleItemAction.ID">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1SSRSDocumentSource.SortAction">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.SortAction.ID">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.SortAction.Direction">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.AlignHorzEnum">
            <summary>
            Specifies the horizontal alignment of text within a containing object.
            
            This is the type of <see cref="P:C1.Win.C1Document.Style.TextAlignHorz"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AlignHorzEnum.Near">
            <summary>
            The text is left-aligned.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AlignHorzEnum.Center">
            <summary>
            The text is centered horizontally.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AlignHorzEnum.Far">
            <summary>
            The text is right-aligned.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AlignHorzEnum.Justify">
            <summary>
            The text is justified horizontally by widening the white spaces existing in the text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AlignHorzEnum.JustifyChars">
            <summary>
            The text is justified horizontally by adding white spaces between all characters in the text.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.AlignVertEnum">
            <summary>
            Specifies the vertical alignment of text within a containing object.
            
            This is the type of <see cref="P:C1.Win.C1Document.Style.TextAlignVert"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AlignVertEnum.Top">
            <summary>
            The text is top-aligned.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AlignVertEnum.Center">
            <summary>
            The text is centered vertically.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AlignVertEnum.Bottom">
            <summary>
            The text is bottom-aligned.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AlignVertEnum.Justify">
            <summary>
            The text is justified vertically.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ImageAlignHorzEnum">
            <summary>
            Specifies the horizontal alignment of foreground and background images.
            
            This is the type of <see cref="P:C1.Win.C1Document.ImageAlign.AlignHorz"/> property
            on <see cref="P:C1.Win.C1Document.Style.ImageAlign"/> and <see cref="P:C1.Win.C1Document.Style.BackgroundImageAlign"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ImageAlignHorzEnum.Left">
            <summary>
            The image is left-aligned.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ImageAlignHorzEnum.Center">
            <summary>
            The image is centered horizontally.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ImageAlignHorzEnum.Right">
            <summary>
            The image is right-aligned.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ImageAlignVertEnum">
            <summary>
            Specifies the vertical alignment of foreground and background images.
            
            This is the type of <see cref="P:C1.Win.C1Document.ImageAlign.AlignVert"/> property
            on <see cref="P:C1.Win.C1Document.Style.ImageAlign"/> and <see cref="P:C1.Win.C1Document.Style.BackgroundImageAlign"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ImageAlignVertEnum.Top">
            <summary>
            The image is top-aligned.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ImageAlignVertEnum.Center">
            <summary>
            The image is centered vertically.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ImageAlignVertEnum.Bottom">
            <summary>
            The image is bottom-aligned.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.TextPositionEnum">
            <summary>
            Specifies the subscript and superscript properties of text.
            
            This is the type of <see cref="P:C1.Win.C1Document.Style.TextPosition"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.TextPositionEnum.Normal">
            <summary>
            The text is positioned and sized normally.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.TextPositionEnum.Subscript">
            <summary>
            The text is positioned and sized as subscript.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.TextPositionEnum.Superscript">
            <summary>
            The text is positioned and sized as superscript.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.SplitBehaviorEnum">
            <summary>
            Defines the splitting behavior of a render object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.SplitBehaviorEnum.Never">
            <summary>
            The object should not be split between pages
            (i.e. should always be kept together on a single page), object
            is cut off if it not fit the page.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.SplitBehaviorEnum.SplitIfNeeded">
            <summary>
            The object can be split if it does not fit onto the current page.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.SplitBehaviorEnum.KeepTogether">
            <summary>
            The object can be split only if it is too large to fit on an empty 
            page. In that case, the object is split immediately. Otherwise, a 
            new page is started and the object is placed on it without 
            splitting.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.BreakEnum">
            <summary>
            Defines the various breaks which can be forced before or after render object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BreakEnum.None">
            <summary>
            No break.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BreakEnum.Page">
            <summary>
            New page should be started.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BreakEnum.Column">
            <summary>
            New column should be started.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BreakEnum.Line">
            <summary>
            New line on inline flow should be started.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.FontStyle">
            <summary>
            Defines the font styles.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FontStyle.Normal">
            <summary>
            Normal font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FontStyle.Italic">
            <summary>
            Italic font.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.FontWeight">
            <summary>
            Defines the font weights.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FontWeight.Normal">
            <summary>
            "Normal" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FontWeight.Black">
            <summary>
            "Black" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FontWeight.Bold">
            <summary>
            "Bold" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FontWeight.ExtraBlack">
            <summary>
            "Extra black" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FontWeight.ExtraBold">
            <summary>
            "Extra bold" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FontWeight.ExtraLight">
            <summary>
            "Extra light" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FontWeight.Light">
            <summary>
            "Light" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FontWeight.Medium">
            <summary>
            "Medium" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FontWeight.SemiBold">
            <summary>
            "Semi bold" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FontWeight.SemiLight">
            <summary>
            "Semi light" font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FontWeight.Thin">
            <summary>
            "Thin" font.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.TextDecoration">
            <summary>
            Defines the various text decorations underline, strikeout etc.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.TextDecoration.None">
            <summary>
            No decoration.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.TextDecoration.Underline">
            <summary>
            Underline text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.TextDecoration.Strikeout">
            <summary>
            Strikeout text.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.WordWrapMode">
            <summary>
            Specifies how to break words when lines of text wrap.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.WordWrapMode.Normal">
            <summary>
            Default. A word is not split unless it is too long to fit within the boundaries of the container by itself.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.WordWrapMode.BreakWord">
            <summary>
            A word can be split at any position if needed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Direction">
            <summary>
            Defines
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.WritingMode">
            <summary>
            Specifies whether a contiguous set of characters is written horizontally or vertically.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.Exporter">
            <summary>
            Base class for SSRS exporters.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Exporter">
            <summary>
            The abstract base class for all exporter classes.
            An instance of an <see cref="T:C1.Win.C1Document.Export.Exporter"/> derived class is used to export a document.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.Exporter.OnLongOperation(System.Double,System.Boolean)">
            <summary>
            Fires the <see cref="E:C1.Win.C1Document.Export.Exporter.LongOperation"/> event.
            </summary>
            <param name="complete">A value from 0 (operation has just started) to 1 (operation has completed).</param>
            <param name="canCancel">A value indicating whether the operation can be cancelled.</param>
            <returns>True if the action was not cancelled, false if it was cancelled.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Exporter.Dispose">
            <summary>
            Disposes the <see cref="T:C1.Win.C1Document.Export.Exporter"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.Exporter.ExportAsync(System.IO.Stream)">
            <summary>
            Exports to the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">A stream object to store the export result.</param>
        </member>
        <member name="P:C1.Win.C1Document.Export.Exporter.SingleFileForPage">
            <summary>
            Gets a value indicating whether exporter generates different file for each page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Exporter.ExportProvider">
            <summary>
            Gets an instance of a class derived from <see cref="P:C1.Win.C1Document.Export.Exporter.ExportProvider"/>
            describing the export format associated with the current exporter.
            That instance can be used to retrieve static information about the current export format
            such as format description or default extension.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Exporter.MultiFile">
            <summary>
            Gets a value indicating whether multiple files was generated during exporting,
            in this case stream will contain zip file with several entries for each file.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Exporter.Range">
            <summary>
            Gets or sets the range of pages that is to be exported.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Exporter.DocumentInfo">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Document.Export.Exporter.DocumentInfo"/> object associated with the document
            assigned to the current exporter.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.Export.Exporter.LongOperation">
            <summary>
            Occurs periodically during export.
            Allows to show progress and give the end user the ability to cancel the operation.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.Exporter.AddValue(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="sb"></param>
            <param name="tag"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.Exporter.AddValue(System.Text.StringBuilder,System.String,C1.Win.C1Document.Unit)">
            <summary>
            For internal use.
            </summary>
            <param name="sb"></param>
            <param name="tag"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.Exporter.AddValuePreserve(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="sb"></param>
            <param name="tag"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.Exporter.GetDevInfo">
            <summary>
            Returns DeviceInfo string for SSRS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.Exporter.GetFormat">
            <summary>
            Returns format indentifier for SSRS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.Exporter.ExportAsync(System.IO.Stream)">
            <summary>
            Exports the document asynchronously.
            </summary>
            <param name="stream">The stream to export to.</param>
            <returns>Asynchronous value object.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.Exporter.DocumentSource">
            <summary>
            Gets or sets <see cref="T:C1.Win.C1Document.C1SSRSDocumentSource"/> object providing report data.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.PaginatedExporter">
            <summary>
            Base class for paginated exporters like PDF, IMAGE and so on.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.PaginatedExporter.GetDevInfo">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PaginatedExporter.PageSettings">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.C1PageSettings"/> object defining layout of the page.
            <b>Null</b> indicates default value, specified in the report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PaginatedExporter.Columns">
            <summary>
            Gets or sets the number of columns to set for the report.
            <b>Null</b> indicates default value, specified in the report.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PaginatedExporter.ColumnSpacing">
            <summary>
            Gets or sets the column spacing.
            <b>Null</b> indicates default value, specified in the report.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.ImageExporter">
            <summary>
            Base class for all exporters performing export to image format.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.ImageExporter.GetFormat">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.ImageExporter.GetDevInfo">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.ImageExporter.GetOutputFormat">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.CsvExportProvider">
            <summary>
            Describes export to CSV format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.CsvExporter"/>
        </member>
        <member name="T:C1.Win.C1Document.Export.ExportProvider">
            <summary>
            The abstract base class describing a supported export format.
            All export providers describing specific formats (such as PDF or HTML) derive from this class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.ExportProvider.NewExporter">
            <summary>
            Creates a new Exporter object.
            When overridden in a derived class, returns an instance of a specialized class derived from <see cref="T:C1.Win.C1Document.Export.Exporter"/>.
            </summary>
            <returns>Returns the newly created exporter.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.ExportProvider.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the <see cref="T:C1.Win.C1Document.Export.Exporter"/> associated with the current export provider
            can handle the specified type of document pages' range.
            The default implementation of this method returns <b>true</b> if the specified range type
            is <see cref="F:C1.Win.C1Document.OutputRangeType.All"/>, <b>false</b> otherwise.
            </summary>
            <param name="rangeType">The type of the range to test.</param>
            <returns><b>true</b> if the associated <see cref="T:C1.Win.C1Document.Export.Exporter"/> can handle the specified output range, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportProvider.FormatName">
            <summary>
            Gets a short description of the current export format.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.ExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.CsvExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.CsvExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.CsvExporter"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "csv".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExportProvider.FormatName">
            <summary>
            Gets a short description of the CSV export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.CsvExporterEncoding">
            <summary>
            Defines text encodings supported by <see cref="T:C1.Win.C1Document.Export.Ssrs.CsvExporter"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.CsvExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to CSV.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.ExportProvider">
            <summary>
            Gets <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.CsvExportProvider"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.Encoding">
            <summary>
            Gets or sets the character encoding scheme: ASCII, UTF7, UTF8, or Unicode.
            The default value is UTF8.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.ExcelMode">
            <summary>
            Gets or sets a value indicating whether the target output is for Excel.
            The default value is true.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.FieldDelimiter">
            <summary>
            Gets or sets the delimiter string to put in the result.
            The default value is a comma ",".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.FileExtension">
            <summary>
            Gets or sets the file extension to put on the result.
            The default value is .CSV.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.NoHeader">
            <summary>
            Gets or sets a value indicating whether the header row is excluded from the output.
            The default value is false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.Qualifier">
            <summary>
            Gets or sets the qualifier string to put around results that contain the field delimiter or record
            delimiter. If the results contain the qualifier, the qualifier is repeated.
            The Qualifier setting must be different from the FieldDelimiter and RecordDelimiter settings.
            The default value is a quotation mark (").
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.RecordDelimiter">
            <summary>
            Gets ot sets the record delimiter to put at the end of each record.
            The default value is &lt;cr>&lt;lf>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.SuppressLineBreaks">
            <summary>
            Gets or sets value indicating whether line breaks are removed from the data included in the output.
            The default value is false.
            If the value is true, the FieldDelimiter, RecordDelimiter, and Qualifier settings cannot be a space character.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.UseFormattedValues">
            <summary>
            Gets or sets a value indicating whether formatted strings are put into the CSV output.
            <b>null</b> indicates default value true when ExcelMode is true; otherwise it is false.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.PdfExportProvider">
            <summary>
            Describes export to Adobe PDF format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.PdfExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.PdfExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.PdfExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.PdfExporter"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.PdfExportProvider.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the specified type of range can be exported by the current export provider.
            </summary>
            <param name="rangeType">The <see cref="T:C1.Win.C1Document.OutputRangeType"/> to test.</param>
            <returns>True if the specified range can be exported, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "pdf".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExportProvider.FormatName">
            <summary>
            Gets a short description of the PDF export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.PdfExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to PDF.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.ExportProvider">
            <summary>
            Gets <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.PdfExportProvider"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.HumanReadablePDF">
            <summary>
            Gets or sets the value indicating whether the PDF should be compressed,
            which allows the source to be more readable. The default value is false.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.TiffExportProvider">
            <summary>
            Describes export to image TIFF format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.TiffExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.TiffExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.TiffExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.TiffExporter"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.TiffExportProvider.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the specified type of range can be exported by the current export provider.
            </summary>
            <param name="rangeType">The <see cref="T:C1.Win.C1Document.OutputRangeType"/> to test.</param>
            <returns>True if the specified range can be exported, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.TiffExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "tiff".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.TiffExportProvider.FormatName">
            <summary>
            Gets a short description of the PNG export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.TiffExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to TIFF.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.TiffExporter.ExportProvider">
            <summary>
            Gets <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.TiffExportProvider"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.BmpExportProvider">
            <summary>
            Describes export to image BMP format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.BmpExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.BmpExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.BmpExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.BmpExporter"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.BmpExportProvider.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the specified type of range can be exported by the current export provider.
            </summary>
            <param name="rangeType">The <see cref="T:C1.Win.C1Document.OutputRangeType"/> to test.</param>
            <returns>True if the specified range can be exported, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.BmpExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "bmp".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.BmpExportProvider.FormatName">
            <summary>
            Gets a short description of the BMP export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.BmpExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to BMP.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.BmpExporter.ExportProvider">
            <summary>
            Gets <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.BmpExportProvider"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.EmfExportProvider">
            <summary>
            Describes export to image EMF format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.EmfExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.EmfExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.EmfExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.EmfExporter"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.EmfExportProvider.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the specified type of range can be exported by the current export provider.
            </summary>
            <param name="rangeType">The <see cref="T:C1.Win.C1Document.OutputRangeType"/> to test.</param>
            <returns>True if the specified range can be exported, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.EmfExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "emf".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.EmfExportProvider.FormatName">
            <summary>
            Gets a short description of the EMF export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.EmfExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to EMF.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.EmfExporter.ExportProvider">
            <summary>
            Gets <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.EmfExportProvider"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.GifExportProvider">
            <summary>
            Describes export to image GIF format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.GifExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.GifExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.GifExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.GifExporter"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.GifExportProvider.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the specified type of range can be exported by the current export provider.
            </summary>
            <param name="rangeType">The <see cref="T:C1.Win.C1Document.OutputRangeType"/> to test.</param>
            <returns>True if the specified range can be exported, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.GifExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "gif".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.GifExportProvider.FormatName">
            <summary>
            Gets a short description of the GIF export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.GifExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to GIF.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.GifExporter.ExportProvider">
            <summary>
            Gets <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.GifExportProvider"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.JpegExportProvider">
            <summary>
            Describes export to image JPEG format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.JpegExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.JpegExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.JpegExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.GifExporter"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.JpegExportProvider.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the specified type of range can be exported by the current export provider.
            </summary>
            <param name="rangeType">The <see cref="T:C1.Win.C1Document.OutputRangeType"/> to test.</param>
            <returns>True if the specified range can be exported, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.JpegExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "jpeg".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.JpegExportProvider.FormatName">
            <summary>
            Gets a short description of the JPEG export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.JpegExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to JPEG.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.JpegExporter.ExportProvider">
            <summary>
            Gets <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.JpegExportProvider"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.PngExportProvider">
            <summary>
            Describes export to image PNG format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.PngExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.PngExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.PngExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.PngExporter"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.PngExportProvider.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the specified type of range can be exported by the current export provider.
            </summary>
            <param name="rangeType">The <see cref="T:C1.Win.C1Document.OutputRangeType"/> to test.</param>
            <returns>True if the specified range can be exported, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PngExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "png".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PngExportProvider.FormatName">
            <summary>
            Gets a short description of the PNG export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.PngExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to PNG.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.PngExporter.ExportProvider">
            <summary>
            Gets <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.PngExportProvider"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.ExcelExportProvider">
            <summary>
            Describes export to Microsoft Excel format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.ExcelExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.ExcelExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.ExcelExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.ExcelExporter"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.ExcelExportProvider.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the specified type of range can be exported by the current export provider.
            </summary>
            <param name="rangeType">The <see cref="T:C1.Win.C1Document.OutputRangeType"/> to test.</param>
            <returns>True if the specified range can be exported, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.ExcelExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "xls".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.ExcelExportProvider.FormatName">
            <summary>
            Gets a short description of the Excel export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.ExcelExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to Excel.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.ExcelExporter.OmitDocumentMap">
            <summary>
            Gets or sets a value indicating whether to omit the document map for reports that support it.
            The default value is false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.ExcelExporter.OmitFormulas">
            <summary>
            Gets or sets a value indicating whether to omit formulas from the rendered report.
            The default value is false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.ExcelExporter.SimplePageHeaders">
            <summary>
            Gets or sets a value indicating whether the page header of the report is rendered to the Excel page header.
            A value of false indicates that the page header is rendered to the first row of the worksheet.
            The default value is false.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.MhtmlExportProvider">
            <summary>
            Describes export to Web archive (MHTML) format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.MhtmlExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.MhtmlExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.MhtmlExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.MhtmlExporter"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.MhtmlExportProvider.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the specified type of range can be exported by the current export provider.
            </summary>
            <param name="rangeType">The <see cref="T:C1.Win.C1Document.OutputRangeType"/> to test.</param>
            <returns>True if the specified range can be exported, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.MhtmlExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "mhtml".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.MhtmlExportProvider.FormatName">
            <summary>
            Gets a short description of the MHTML export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.MhtmlExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to Web archive (MHTML) format.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.MhtmlExporter.OutlookCompat">
            <summary>
            Gets or sets a value indicating whether to render with extra metadata that makes the report look
            better in Outlook.
            The default value is true.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.WordExportProvider">
            <summary>
            Describes export to Microsoft Word format.
            </summary>
            <seealso cref="T:C1.Win.C1Document.Export.Ssrs.WordExporter"/>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.WordExportProvider.NewExporter">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Document.Export.Ssrs.WordExporter"/> class.
            </summary>
            <returns>The newly created <see cref="T:C1.Win.C1Document.Export.Ssrs.WordExporter"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Export.Ssrs.WordExportProvider.CanExportRange(C1.Win.C1Document.OutputRangeType)">
            <summary>
            Tests whether the specified type of range can be exported by the current export provider.
            </summary>
            <param name="rangeType">The <see cref="T:C1.Win.C1Document.OutputRangeType"/> to test.</param>
            <returns>True if the specified range can be exported, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.WordExportProvider.DefaultExtension">
            <summary>
            Gets the default filename extension for the current export format.
            This implementation returns "doc".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.WordExportProvider.FormatName">
            <summary>
            Gets a short description of the Microsoft Word export format.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.WordTableAutoFitMode">
            <summary>
            Defines how AutoFit value can be specified for tables in generated Word files.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.Ssrs.WordTableAutoFitMode.False">
            <summary>
            AutoFit is set to false on any Word table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.Ssrs.WordTableAutoFitMode.True">
            <summary>
            AutoFit is set to true on every Word table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.Ssrs.WordTableAutoFitMode.Never">
            <summary>
            AutoFit values are not set on any Word table and behavior reverts to the Word default.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.Export.Ssrs.WordTableAutoFitMode.Default">
            <summary>
            AutoFit is set on tables that are narrower than the physical drawing area (physical page width excluding margins) per logical page.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Export.Ssrs.WordExporter">
            <summary>
            Represents an object that can be used to export a SSRS report to Microsoft Word format.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.WordExporter.AutoFit">
            <summary>
            Gets or sets a value defining how an AutoFit value will be specified for tables in generated Word file.
            The default value is <see cref="F:C1.Win.C1Document.Export.Ssrs.WordTableAutoFitMode.Default"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.WordExporter.ExpandToggles">
            <summary>
            Gets or sets a value indicating whether all items that can be toggled should render in their fully-expanded state.
            The default value is false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.WordExporter.FixedPageWidth">
            <summary>
            Gets or sets a value indicating whether the Page Width written to the DOC file will grow to accommodate the width of the largest page in the Report Body.
            The default value is false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.WordExporter.OmitHyperlinks">
            <summary>
            Gets or sets a value indicating whether to omit the Hyperlink action on all items where it is set.
            The default value is false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Export.Ssrs.WordExporter.OmitDrillthroughs">
            <summary>
            Gets or sets a value indicating whether to omit the Drillthrough action on all items where it is set.
            The default value is false.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.PageColumn">
            <summary>
            Represents the properties of a page column.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PageColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.PageColumn"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PageColumn.#ctor(C1.Win.C1Document.Unit,C1.Win.C1Document.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.PageColumn"/> class.
            </summary>
            <param name="width">A <see cref="T:C1.Win.C1Document.Unit"/> value representing the <see cref="P:C1.Win.C1Document.PageColumn.Width"/> of the current column.</param>
            <param name="spacing">A <see cref="T:C1.Win.C1Document.Unit"/> value representing the <see cref="P:C1.Win.C1Document.PageColumn.Spacing"/> of the current column.</param>
        </member>
        <member name="P:C1.Win.C1Document.PageColumn.Width">
            <summary>
            Gets the width of the current column.
            <para>The default column width is <b>"auto"</b>.</para>
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageColumn.Spacing">
            <summary>
            Gets the spacing between the current and next columns.
            <para>The default column spacing is <b>5mm</b>.</para>
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.PageColumnCollection">
            <summary>
            Collection of <see cref="T:C1.Win.C1Document.PageColumn"/> objects.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.PageLayout">
            <summary>
            Represents the page layout of a <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PageLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.PageLayout"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PageLayout.#ctor(C1.Win.C1Document.C1PageSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.PageLayout"/> class.
            </summary>
            <param name="pageSettings">The page settings to use.</param>
        </member>
        <member name="P:C1.Win.C1Document.PageLayout.Document">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.C1Document"/> object containing this <see cref="T:C1.Win.C1Document.PageLayout"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayout.Owner">
            <summary>
            Gets <see cref="T:C1.Win.C1Document.IDocumentObjectOwner"/> object owning current object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayout.PageHeader">
            <summary>
            Gets or sets the page header associated with the current page layout.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayout.PageFooter">
            <summary>
            Gets or sets the page footer associated with the current page layout.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayout.Watermark">
            <summary>
            Gets or sets the watermark associated with the current page layout.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayout.PageSettings">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.C1PageSettings"/> object associated with the current page layout.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayout.HasColumns">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:C1.Win.C1Document.PageLayout.Columns"/> collection
            on the current page layout has been initialized and is not empty.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayout.Columns">
            <summary>
            Gets the collection of <see cref="T:C1.Win.C1Document.PageColumn"/> objects associated with the current page layout.
            Note that accessing this property initializes the collection of column definitions
            if it has not been initialized yet.
            Use <see cref="P:C1.Win.C1Document.PageLayout.HasColumns"/> to test whether any columns have been defined on this layout.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.PageLayoutKindEnum">
            <summary>
            Identifies the set of pages to which a page layout is applied in a <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.PageLayoutKindEnum.Default">
            <summary>
            The current page layout is the default for a document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.PageLayoutKindEnum.FirstPage">
            <summary>
            The current page layout is to be used for the first page of a document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.PageLayoutKindEnum.LastPage">
            <summary>
            The current page layout is to be used for the last page of a document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.PageLayoutKindEnum.EvenPages">
            <summary>
            The current page layout is to be used for even pages of a document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.PageLayoutKindEnum.OddPages">
            <summary>
            The current page layout is to be used for odd pages of a document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.PageLayouts">
            <summary>
            Represents the standard page layouts used in a <see cref="T:C1.Win.C1Document.RenderSection"/>
            (such as the default page layout, page layout used for first and last pages,
            and so on).
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PageLayouts.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.PageLayouts"/> class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayouts.Document">
            <summary>
            Gets <see cref="T:C1.Win.C1Document.C1Document"/> object containing this <see cref="T:C1.Win.C1Document.PageLayouts"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayouts.Owner">
            <summary>
            Gets or sets <see cref="T:C1.Win.C1Document.RenderSection"/> object owning this <see cref="T:C1.Win.C1Document.PageLayouts"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayouts.Item(C1.Win.C1Document.PageLayoutKindEnum)">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.PageLayout"/> of the specified <see cref="T:C1.Win.C1Document.PageLayoutKindEnum"/>.
            Returns <b>null</b> if the specified kind of page layout has not been specified
            for the current <see cref="T:C1.Win.C1Document.PageLayouts"/>.
            </summary>
            <param name="kind">The kind of page layout to return.</param>
            <returns>The page layout with specified kind, or <b>null</b> if it does not exist.</returns>
        </member>
        <member name="P:C1.Win.C1Document.PageLayouts.FirstPage">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.PageLayout"/> used for the first page of the current document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayouts.LastPage">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.PageLayout"/> used for the last page of the current document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayouts.EvenPages">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.PageLayout"/> used for even pages of the current document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayouts.OddPages">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.PageLayout"/> used for odd pages of the current document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PageLayouts.Default">
            <summary>
            Gets or sets the default <see cref="T:C1.Win.C1Document.PageLayout"/> for the current document.
            The effective page layout for each page is determined by merging this layout
            with all other applicable layouts.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.PageObjectKey">
            <summary>
            Represents unique key of <see cref="T:C1.Win.C1Document.PageObject"/> in the tree.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PageObjectKey.op_Equality(C1.Win.C1Document.PageObjectKey,C1.Win.C1Document.PageObjectKey)">
            <summary>
            Determines if the specified values are equal.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PageObjectKey.op_Inequality(C1.Win.C1Document.PageObjectKey,C1.Win.C1Document.PageObjectKey)">
            <summary>
            Determines if the specified values are not equal.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ParameterType">
            <summary>
            Specifies the type of a value (e.g. in a <see cref="!:C1.Xaml.C1Document.Parameter"/>).
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ParameterType.Boolean">
            <summary>
            The value is Boolean.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ParameterType.DateTime">
            <summary>
            The value is DateTime.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ParameterType.Integer">
            <summary>
            The value is Integer.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ParameterType.Float">
            <summary>
            The value is Float.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.ParameterType.String">
            <summary>
            The value is String.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.LabeledValue">
            <summary>
            Represents a value with label, label can be used in user interface.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.LabeledValue.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.LabeledValue"/> class.
            </summary>
            <param name="value">Value represented by the <see cref="T:C1.Win.C1Document.LabeledValue"/> class.</param>
            <param name="label">Label of value.</param>
        </member>
        <member name="P:C1.Win.C1Document.LabeledValue.Value">
            <summary>
            Gets or sets actual value represented by this <see cref="T:C1.Win.C1Document.LabeledValue"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.LabeledValue.Label">
            <summary>
            Gets label for the value to display in the UI.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.LabeledValues">
            <summary>
            Represents a collection of <see cref="T:C1.Win.C1Document.LabeledValue"/> objects.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.LabeledValues.IndexOfValue(System.Object)">
            <summary>
            Searches <see cref="T:C1.Win.C1Document.LabeledValue"/> object with specified value.
            </summary>
            <param name="value">Value of <see cref="T:C1.Win.C1Document.LabeledValue"/> object.</param>
            <returns>Index of searched object or -1 if not found.</returns>
        </member>
        <member name="T:C1.Win.C1Document.Parameter">
            <summary>
            Represents a user-defined parameter which can be used in <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Parameter.CheckValue(System.Object,System.Object@,System.String@)">
            <summary>
            Checks the value passed to the fact that it is the correct value for the parameter
            and converts it to type specified in <see cref="P:C1.Win.C1Document.Parameter.DataType"/> parameter.
            For example, if object contains <b>byte</b> and <see cref="P:C1.Win.C1Document.Parameter.DataType"/> is Int then
            <see cref="!:correctedValue"/> will contain <b>Int32</b>.
            </summary>
            <param name="value">Value to check.</param>
            <param name="correctedValue">OUT: Contains value converted to type defined in <see cref="P:C1.Win.C1Document.Parameter.DataType"/> property.</param>
            <param name="errorMessage">OUT: Contains error message if value is invalid.</param>
            <returns>Returns <b>true</b> if value is valid and <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Parameter.IsObjectsEquals(System.Object,System.Object)">
            <summary>
            Compares two objects using Equals() methods, returns <b>true</b> if both objects are null.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.Nullable">
            <summary>
            Gets or sets value indicating the value for this parameter can be Null.
            Cannot be true if this is a multivalue parameter.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.AllowBlank">
            <summary>
            Gets or sets value indicating the value for this parameter can be
            the empty string. Ignored if <see cref="P:C1.Win.C1Document.Parameter.DataType"/> is not String.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.MultiValue">
            <summary>
            Gets or sets value indicating this is a multivalue parameter
            (a parameter that can take a set of values).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.Hidden">
            <summary>
            Gets or sets value indicating the parameter should not be
            displayed to the user
            (however, it will still be available for programmatic
            use with subreports, drillthrough reports etc.)
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.Prompt">
            <summary>
            Gets or sets the user prompt to display when asking
            for parameter values.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.AllowedValues">
            <summary>
            Gets a list of allowed parameter values.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.DefaultValue">
            <summary>
            Gets or sets default value of this parameter.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.Value">
            <summary>
            Gets or sets parameter value. Value can be specifed as array if <see cref="P:C1.Win.C1Document.Parameter.MultiValue"/> is true
            in this case all items should have same type item can not be an array.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Parameter.DataType">
            <summary>
            Gets or sets the data type of the <see cref="T:C1.Win.C1Document.Parameter"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ParameterCollection">
            <summary>
            Represents a collection of <see cref="T:C1.Win.C1Document.Parameter"/> objects.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ParameterCollection.ContainsVisibleParameters">
            <summary>
            Checks whether collection contains parameters visible for end user.
            </summary>
            <returns><b>true</b> if collection contains parameter visible for end user; <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.RenderFragment.BuildDrawParams(C1.Win.C1Document.Graphics.C1Graphics,C1.Win.C1Document.FragmentDrawParams@)">
            <summary>
            Calculates fields of <see cref="T:C1.Win.C1Document.FragmentDrawParams"/> on the base of Bounds, ParentBounds etc.
            </summary>
            <param name="graphics"></param>
            <param name="fdp"></param>
        </member>
        <member name="M:C1.Win.C1Document.RenderFragment.EnumerateParagraphs(C1.Win.Interop.Rect,System.Double,System.Double,C1.Win.C1Document.EnumerateParagraphCallback)">
            <summary>
            Enumerates all child paragraphs intersecting with specified bounds.
            </summary>
            <param name="bounds"></param>
            <param name="offsX"></param>
            <param name="offsY"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.RenderFragment.ToPagePosition(C1.Win.Interop.Point)">
            <summary>
            Converts point specified relative to top-left corner of the parent fragment
            to page coordinates.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.RenderFragment.CalcHitTest(C1.Win.C1Document.HitTestInfo,C1.Win.Interop.Point,C1.Win.Interop.Rect,System.Double,System.Double)">
            <summary>
            Calculates information about specific page point.
            </summary>
            <param name="hti">Hit test info.</param>
            <param name="ptPage">Coordinates of the point to test, specified relative to the page top left corner containing this <see cref="T:C1.Win.C1Document.RenderFragment"/>, in C1Document.DefaultUnit units.</param>
            <param name="clipRectPage"></param>
            <param name="xOffs"></param>
            <param name="yOffs"></param>
        </member>
        <member name="M:C1.Win.C1Document.RenderFragment.Draw(C1.Win.C1Document.Graphics.C1Graphics,C1.Win.Interop.Rect,System.Nullable{C1.Win.Interop.Rect})">
            <summary>
            Draw fragments in specified position, parentBounds defines parent content rectangle,
            can be used to determine whether set clipping region.
            All positions specified in pixels of graphics.
            </summary>
            <param name="graphics"></param>
            <param name="bounds"></param>
            <param name="parentBounds"></param>
            <param name="ca"></param>
        </member>
        <member name="P:C1.Win.C1Document.RenderFragment.RenderObject">
            <summary>
            Gets the <see cref="P:C1.Win.C1Document.RenderFragment.RenderObject"/> producing this fragment.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderFragment.Page">
            <summary>
            Get the <see cref="T:C1.Win.C1Document.C1Page"/> object containing this fragment.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderFragment.ParentFragment">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.RenderContainerFragment"/> containing this fragment, returns null if
            this fragment is in page.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.FragmentDrawParams">
            <summary>
            Defines properties used during drawing of <see cref="T:C1.Win.C1Document.RenderFragment"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FragmentDrawParams.DrawingBoundsPx">
            <summary>
            Drawing area of fragment, i.e. Bounds without spacing.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FragmentDrawParams.BackgroundBoundsPx">
            <summary>
            Background rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FragmentDrawParams.ContentBoundsPx">
            <summary>
            Content rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.FragmentDrawParams.Borders">
            <summary>
            Parameters of borders.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.BorderSide">
            <summary>
            Represents one side of the border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderSide.Line">
            <summary>
            Defines line style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderSide.WidthPx">
            <summary>
            Contains line width in pixels.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.BorderParams">
            <summary>
            Contains information about fragment borders, used in <see cref="T:C1.Win.C1Document.RenderFragment"/> drawing.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderParams.BoundsPx">
            <summary>
            Rectangle of borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderParams.Left">
            <summary>
            Left border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderParams.Top">
            <summary>
            Top border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderParams.Right">
            <summary>
            Right border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderParams.Bottom">
            <summary>
            Bottom border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderParams.RadiusXPx">
            <summary>
            Width of rounded border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderParams.RadiusYPx">
            <summary>
            Height of rounded border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BorderParams.RoundBordersClipRegion">
            <summary>
            Clip region used when object has rounded borders,
            should be applied before drawing background or content.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderArea">
            <summary>
            Represents the base class for all simple containers like <see cref="T:C1.Win.C1Document.RenderArea"/>, <see cref="!:TableCell"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderContentObject">
            <summary>
            The abstract base class for all render objects containing collection of paragraphs.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderContentObject.Paragraphs">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.RenderParagraphCollection"/> collection representing the content of this <see cref="T:C1.Win.C1Document.RenderContentObject"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IFloater">
            <summary>
            This interface should be implemented by <see cref="T:C1.Win.C1Document.RenderObject"/>
            so that it could be added to the <see cref="P:C1.Win.C1Document.RenderContentObject.Floaters"/> collection.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.FloaterCollection">
            <summary>
            Represents the collection of RenderObject object which supports <see cref="T:C1.Win.C1Document.IFloater"/> interface.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderObjectCollection`1">
            <summary>
            Represents the collection of RenderObject objects.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:C1.Win.C1Document.RenderImage">
            <summary>
            Represents the base class for all simple containers like <see cref="T:C1.Win.C1Document.RenderArea"/>, <see cref="!:TableCell"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderImage.Image">
            <summary>
            Gets or sets an image that is
            rendered by the current <see cref="T:C1.Win.C1Document.RenderImage"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderImage.ImageName">
            <summary>
            Gets or sets the name of an image that is 
            rendered by the current <see cref="T:C1.Win.C1Document.RenderImage"/> object.
            When the current object renders, the actual image is retrieved by this name
            from the <see cref="P:C1.Win.C1Document.C1Document.Dictionary"/> of the containing <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.BordersSplitMode">
            <summary>
            Specifies how borders are drawn when the object is split between pages.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BordersSplitMode.None">
            <summary>
            Borders are not drawn where the object is split.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BordersSplitMode.Square">
            <summary>
            Square borders are drawn where the object is split.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.BordersSplitMode.Round">
            <summary>
            Borders are drawn where the object is split.
            If the border is round (see <see cref="P:C1.Win.C1Document.IBorders.RadiusX"/>,
            <see cref="P:C1.Win.C1Document.IBorders.RadiusY"/>),
            round borders are drawn where the object is split.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderParagraph">
            <summary>
            Represents a paragraph in a <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderParagraph.HasContent">
            <summary>
            Gets a value indicating whether the <see cref="P:C1.Win.C1Document.RenderParagraph.Content"/> collection
            has been initialized and contains one or more elements.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderParagraph.Content">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.ParagraphObjectCollection"/> collection representing content of this
            <see cref="T:C1.Win.C1Document.RenderParagraph"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ParagraphObject">
            <summary>
            The abstract base class for inline text and images, rendered using a single style,
            in the <see cref="P:C1.Win.C1Document.RenderParagraph.Content"/> of a <see cref="T:C1.Win.C1Document.RenderParagraph"/> object.
            </summary>
            <seealso cref="T:C1.Win.C1Document.ParagraphText"/>
            <seealso cref="!:ParagraphImage"/>
        </member>
        <member name="P:C1.Win.C1Document.ParagraphObject.Hyperlink">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.C1Hyperlink"/> associated with the current paragraph object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ParagraphObject.ToolTip">
            <summary>
            Gets or sets a tooltip associated with this <see cref="T:C1.Win.C1Document.ParagraphObject"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ParagraphText">
            <summary>
            Represents a run of text, rendered using a single style,
            in the <see cref="P:C1.Win.C1Document.RenderParagraph.Content"/> of a <see cref="T:C1.Win.C1Document.RenderParagraph"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ParagraphText.Text">
            <summary>
            Gets or sets the text of the current <see cref="T:C1.Win.C1Document.ParagraphText"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ParagraphInlineContainer">
            <summary>
            Represents an inline container for <see cref="T:C1.Win.C1Document.RenderObject"/> supporting <see cref="T:C1.Win.C1Document.IFloater"/> interface.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ParagraphInlineContainer.Content">
            <summary>
            Gets or sets <see cref="T:C1.Win.C1Document.RenderObject"/> providing content for this <see cref="T:C1.Win.C1Document.ParagraphInlineContainer"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ParagraphObjectCollection">
            <summary>
            Represents a collection of <see cref="T:C1.Win.C1Document.RenderObject"/> objects which support <see cref="!:IParagraphObject"/> interface.
            <see cref="T:C1.Win.C1Document.ParagraphObjectCollection"/> represents a content of the <see cref="T:C1.Win.C1Document.RenderParagraph"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ParagraphObjectCollection.Owner">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.RenderParagraph"/> object containing this object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderParagraphCollection">
            <summary>
            Represents the collection of <see cref="T:C1.Win.C1Document.RenderParagraph"/> objects.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderSection">
            <summary>
            Represents a part of a document with particular page layout.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.RenderSection.PageLayouts">
            <summary>
            Gets the collection of page layouts used in the <see cref="T:C1.Win.C1Document.RenderSection"/> object.
            In addition to the default layout which is always present, special layouts
            may be defined for first, last, even and odd pages of the document.
            The effective layout for each page is then produced by merging all applicable layouts.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.RenderSectionCollection">
            <summary>
            Represents a collection of <see cref="T:C1.Win.C1Document.RenderSection"/> objects.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IImageAlign">
            <summary>
            Defines image alignment properties.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IImageAlign.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment of an image within a container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IImageAlign.AlignVert">
            <summary>
            Gets or sets the vertical alignment of an image within a container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IImageAlign.StretchHorz">
            <summary>
            Gets or sets a value indicating whether an image is stretched horizontally to fill its container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IImageAlign.StretchVert">
            <summary>
            Gets or sets a value indicating whether an image is stretched vertically to fill its container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IImageAlign.KeepAspectRatio">
            <summary>
            Gets or sets a value indicating whether the original aspect ratio is preserved when rendering an image.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IImageAlign.TileHorz">
            <summary>
            Gets or sets a value indicating whether an image is tiled horizontally within its container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IImageAlign.TileVert">
            <summary>
            Gets or sets a value indicating whether an image is tiled vertically within its container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IImageAlign.BestFit">
            <summary>
            Gets or sets a value indicating whether an image should be resized to best fit within its container.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.ImageAlign">
            <summary>
            Represents the alignment of an image within its container.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.ImageAlign.#ctor(C1.Win.C1Document.ImageAlignHorzEnum,C1.Win.C1Document.ImageAlignVertEnum,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.ImageAlign"/> class.
            </summary>
            <param name="alignHorz">A value assigned to <see cref="P:C1.Win.C1Document.ImageAlign.AlignHorz"/>.</param>
            <param name="alignVert">A value assigned to <see cref="P:C1.Win.C1Document.ImageAlign.AlignVert"/>.</param>
            <param name="stretchHorz">A value assigned to <see cref="P:C1.Win.C1Document.ImageAlign.StretchHorz"/>.</param>
            <param name="stretchVert">A value assigned to <see cref="P:C1.Win.C1Document.ImageAlign.StretchVert"/>.</param>
            <param name="keepAspectRatio">A value assigned to <see cref="P:C1.Win.C1Document.ImageAlign.KeepAspectRatio"/>.</param>
            <param name="tileHorz">A value assigned to <see cref="P:C1.Win.C1Document.ImageAlign.TileHorz"/>.</param>
            <param name="tileVert">A value assigned to <see cref="P:C1.Win.C1Document.ImageAlign.TileVert"/>.</param>
        </member>
        <member name="M:C1.Win.C1Document.ImageAlign.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:C1.Win.C1Document.ImageAlign"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:C1.Win.C1Document.ImageAlign"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Document.ImageAlign.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment of an image within a container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ImageAlign.AlignVert">
            <summary>
            Gets or sets the vertical alignment of an image within a container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ImageAlign.StretchHorz">
            <summary>
            Gets or sets a value indicating whether an image is stretched horizontally to fill its container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ImageAlign.StretchVert">
            <summary>
            Gets or sets a value indicating whether an image is stretched vertically to fill its container.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ImageAlign.KeepAspectRatio">
            <summary>
            Gets or sets a value indicating whether the original aspect ratio is preserved when rendering an image.
            Used when <see cref="P:C1.Win.C1Document.ImageAlign.StretchHorz"/> or <see cref="P:C1.Win.C1Document.ImageAlign.StretchVert"/> is <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ImageAlign.TileHorz">
            <summary>
            Gets or sets a value indicating whether an image is tiled horizontally within its container.
            Ignored if <see cref="P:C1.Win.C1Document.ImageAlign.StretchHorz"/> is <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ImageAlign.TileVert">
            <summary>
            Gets or sets a value indicating whether an image is tiled vertically within its container.
            Ignored if <see cref="P:C1.Win.C1Document.ImageAlign.StretchVert"/> is <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.ImageAlign.BestFit">
            <summary>
            Gets or sets a value indicating whether an image should be resized to best fit within its container.
            See <b>remarks</b> for details.
            </summary>
            <remarks>
            <para>
            Getting this property returns a Boolean conjunction (<b>AND</b>) of the
            <see cref="P:C1.Win.C1Document.ImageAlign.StretchHorz"/>, <see cref="P:C1.Win.C1Document.ImageAlign.StretchVert"/> and <see cref="P:C1.Win.C1Document.ImageAlign.KeepAspectRatio"/> values.
            </para>
            <para>
            Setting this property to a <b>true</b> value sets
            <see cref="P:C1.Win.C1Document.ImageAlign.StretchHorz"/>, <see cref="P:C1.Win.C1Document.ImageAlign.StretchVert"/> and <see cref="P:C1.Win.C1Document.ImageAlign.KeepAspectRatio"/> to <b>true</b>.
            </para>
            <para>
            Setting this property to a <b>false</b> value sets
            <see cref="P:C1.Win.C1Document.ImageAlign.KeepAspectRatio"/> only to <b>false</b>.
            </para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.ImageAlign.Default">
            <summary>
            Gets the default image alignment.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IOffsets">
            <summary>
            Describes four <see cref="T:C1.Win.C1Document.Unit"/> values
            corresponding to the four sides of a rectangluar area.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IOffsets.Left">
            <summary>
            Gets or sets the left offset value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IOffsets.Top">
            <summary>
            Gets or sets the top offset value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IOffsets.Right">
            <summary>
            Gets or sets the right offset value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IOffsets.Bottom">
            <summary>
            Gets or sets the bottom offset value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IOffsets.All">
            <summary>
            Sets all four offset values.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Offsets">
            <summary>
            A structure representing four <see cref="T:C1.Win.C1Document.Unit"/> values
            corresponding to the four sides of a rectangluar area.
            Used by <see cref="P:C1.Win.C1Document.Style.Padding"/> and <see cref="P:C1.Win.C1Document.Style.Spacing"/> properties.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Offsets.#ctor(C1.Win.C1Document.Unit,C1.Win.C1Document.Unit,C1.Win.C1Document.Unit,C1.Win.C1Document.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Offsets"/> structure,
            assigning the <see cref="P:C1.Win.C1Document.Offsets.Left"/>, <see cref="P:C1.Win.C1Document.Offsets.Top"/>, <see cref="P:C1.Win.C1Document.Offsets.Right"/> and <see cref="P:C1.Win.C1Document.Offsets.Bottom"/>
            values.
            </summary>
            <param name="left">A <see cref="T:C1.Win.C1Document.Unit"/> value assigned to the <see cref="P:C1.Win.C1Document.Offsets.Left"/> property.</param>
            <param name="top">A <see cref="T:C1.Win.C1Document.Unit"/> value assigned to the <see cref="P:C1.Win.C1Document.Offsets.Top"/> property.</param>
            <param name="right">A <see cref="T:C1.Win.C1Document.Unit"/> value assigned to the <see cref="P:C1.Win.C1Document.Offsets.Right"/> property.</param>
            <param name="bottom">A <see cref="T:C1.Win.C1Document.Unit"/> value assigned to the <see cref="P:C1.Win.C1Document.Offsets.Bottom"/> property.</param>
            <remarks>
            Only absolute <see cref="T:C1.Win.C1Document.Unit"/> values (such as "1mm" or "8in") are allowed.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Document.Offsets.#ctor(C1.Win.C1Document.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Offsets"/> structure,
            assigning a single value to all four offset properties.
            </summary>
            <param name="all">A <see cref="T:C1.Win.C1Document.Unit"/> value assigned to all four offsets.</param>
            <remarks>
            Only absolute <see cref="T:C1.Win.C1Document.Unit"/> values (such as "1mm" or "8in") are allowed.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Offsets.Left">
            <summary>
            Gets or sets the left offset value.
            </summary>
            <remarks>
            Only absolute <see cref="T:C1.Win.C1Document.Unit"/> values (such as "1mm" or "8in") are allowed.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Offsets.Top">
            <summary>
            Gets or sets the top offset value.
            </summary>
            <remarks>
            Only absolute <see cref="T:C1.Win.C1Document.Unit"/> values (such as "1mm" or "8in") are allowed.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Offsets.Right">
            <summary>
            Gets or sets the right offset value.
            </summary>
            <remarks>
            Only absolute <see cref="T:C1.Win.C1Document.Unit"/> values (such as "1mm" or "8in") are allowed.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Offsets.Bottom">
            <summary>
            Gets or sets the bottom offset value.
            </summary>
            <remarks>
            Only absolute <see cref="T:C1.Win.C1Document.Unit"/> values (such as "1mm" or "8in") are allowed.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Offsets.All">
            <summary>
            Sets all four offset values.
            </summary>
            <remarks>
            Only absolute <see cref="T:C1.Win.C1Document.Unit"/> values (such as "1mm" or "8in") are allowed.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Document.IBorders">
            <summary>
            Describes four borders around a rectangular area.
            Each border is represented by a <see cref="T:C1.Win.C1Document.LineDef"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IBorders.Left">
            <summary>
            Gets or sets the left border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IBorders.Top">
            <summary>
            Gets or sets the top border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IBorders.Right">
            <summary>
            Gets or sets the right border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IBorders.Bottom">
            <summary>
            Gets or sets the bottom border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IBorders.All">
            <summary>
            Sets all four borders.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IBorders.RadiusX">
            <summary>
            Gets or sets the width of the ellipse used to draw the rounded corners of the border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IBorders.RadiusY">
            <summary>
            Gets or sets the height of the ellipse used to draw the rounded corners of the border.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Borders">
            <summary>
            A structure defining the four borders around a rectangular area.
            Each border is represented by a <see cref="T:C1.Win.C1Document.LineDef"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Borders.Left">
            <summary>
            Gets or sets the left border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Borders.Top">
            <summary>
            Gets or sets the top border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Borders.Right">
            <summary>
            Gets or sets the right border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Borders.Bottom">
            <summary>
            Gets or sets the bottom border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Borders.All">
            <summary>
            Sets all four borders to a single value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Borders.RadiusX">
            <summary>
            Gets or sets the x-radius of the ellipse used to draw the rounded corners of the border.
            </summary>
            <remarks>
            If both this and <see cref="P:C1.Win.C1Document.Borders.RadiusY"/> are non-zero, all borders are drawn using the 
            same (<see cref="P:C1.Win.C1Document.Borders.Top"/>) border thickness.
            <para>
            If this value is less than the border thickness, border thickness is used as the radius.
            </para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Borders.RadiusY">
            <summary>
            Gets or sets the y-radius of the ellipse used to draw the rounded corners of the border.
            </summary>
            <remarks>
            If both this and <see cref="P:C1.Win.C1Document.Borders.RadiusX"/> are non-zero, all borders are drawn using the 
            same (<see cref="P:C1.Win.C1Document.Borders.Top"/>) border thickness.
            <para>
            If this value is less than the border thickness, border thickness is used as the radius.
            </para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Borders.IsRound">
            <summary>
            Gets a value indicating whether the current <see cref="T:C1.Win.C1Document.Borders"/> structure
            defines rounded borders (i.e. whether both <see cref="P:C1.Win.C1Document.Borders.RadiusX"/> and
            <see cref="P:C1.Win.C1Document.Borders.RadiusY"/> have non-zero values).
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.IShadow">
            <summary>
            Represents the shadow cast by a <see cref="T:C1.Win.C1Document.RenderObject"/>.
            This interface is implemented by <see cref="T:C1.Win.C1Document.Shadow"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IShadow.Transparency">
            <summary>
            Gets or sets the transparency of the shadow, in percent.
            A value of <b>0</b> defines a solid (non-transparent) shadow,
            a value of <b>100</b> (which is the default) defines a fully transparent (invisible) shadow.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IShadow.Size">
            <summary>
            Gets or sets the size of the shadow relative to the size of the object, in percent.
            A value of 100 (which is the default) indicates that the shadow has the same size
            as the object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IShadow.Distance">
            <summary>
            Gets or sets the distance that the shadow's center is offset from the the object's center.
            Note that only absolute <see cref="T:C1.Win.C1Document.Unit"/> values (such as "0.5in" or "4mm") can
            be assigned to this property.
            <para>The default is <b>2mm</b>.</para>
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IShadow.Angle">
            <summary>
            Gets or sets the angle, in degrees, of the shadow. The angle is measured relative
            to the three o'clock position clockwise. The default is <b>45</b>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.IShadow.Color">
            <summary>
            Gets or sets the color of the shadow. The default is <b>Black</b>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Shadow">
            <summary>
            Represents the shadow cast by a <see cref="T:C1.Win.C1Document.RenderObject"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Shadow.#ctor(System.Single,System.Single,C1.Win.C1Document.Unit,System.Single,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Shadow"/> structure,
            assigning <see cref="P:C1.Win.C1Document.Shadow.Transparency"/>, <see cref="P:C1.Win.C1Document.Shadow.Size"/>, <see cref="P:C1.Win.C1Document.Shadow.Distance"/> and <see cref="P:C1.Win.C1Document.Shadow.Angle"/>
            values.
            </summary>
            <param name="transparency">A value assigned to the <see cref="P:C1.Win.C1Document.Shadow.Transparency"/> property.</param>
            <param name="size">A value assigned to the <see cref="P:C1.Win.C1Document.Shadow.Size"/> property.</param>
            <param name="distance">An absolute <see cref="T:C1.Win.C1Document.Unit"/> value assigned to the <see cref="P:C1.Win.C1Document.Shadow.Distance"/> property.</param>
            <param name="angle">A value assigned to the <see cref="P:C1.Win.C1Document.Shadow.Angle"/> property.</param>
            <param name="color">A value assigned to the <see cref="P:C1.Win.C1Document.Shadow.Color"/> property.</param>
        </member>
        <member name="P:C1.Win.C1Document.Shadow.Transparency">
            <summary>
            Gets or sets the transparency of the shadow, in percent.
            A value of <b>0</b> defines a solid (non-transparent) shadow,
            a value of <b>100</b> defines a fully transparent (invisible) shadow.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Shadow.Size">
            <summary>
            Gets or sets the size of the shadow relative to the size of the object, in percent.
            A value of 100 indicates that the shadow has the same size
            as the object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Shadow.Distance">
            <summary>
            Gets or sets the distance that the shadow's center is offset from the the object's center.
            Note that only absolute <see cref="T:C1.Win.C1Document.Unit"/> values (such as "0.5in" or "4mm") can
            be assigned to this property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Shadow.Angle">
            <summary>
            Gets or sets the angle, in degrees, of the shadow. The angle is measured relative
            to the three o'clock position clockwise.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Shadow.Color">
            <summary>
            Gets or sets the color of the shadow.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Style">
            <summary>
            Represents the style of an object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Style.GetPropValueNoDef(System.Int32,System.Object@)">
            <summary>
            Gets value of "style" property.
            If style has no this property and all its parents has no this property
            then null is returned (NOT DEFAULT VALUE).
            </summary>
            <param name="propKey">Key of property (c_propXXX constant).</param>
            <param name="value">OUT: the property value.</param>
        </member>
        <member name="M:C1.Win.C1Document.Style.IsEmpty">
            <summary>
            Returns true if style has no properties.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Style.Clear">
            <summary>
            Clears the current style, resets all properties so that they
            inherit from the parent style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Style.AssignNonInheritedFrom(C1.Win.C1Document.Style)">
            <summary>
            Copies to the current style all properties of another <see cref="!:C1.C1Preview.Style"/> object
            that have been explicitly set on that other style,
            plus the values of the <see cref="P:C1.Win.C1Document.Style.Parent"/> and <see cref="P:C1.Win.C1Document.Style.AmbientParent"/> properties.
            </summary>
            <param name="source">The source <see cref="!:C1.C1Preview.Style"/> object to copy properties from.</param>
            <remarks>
            Effectively, this method makes the current <see cref="!:C1.C1Preview.Style"/>
            a complete copy of the <paramref name="source"/> style.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.Owner">
            <summary>
            Gets the owner of the current style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Style.Parent">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.Style"/> that is the parent of the current style.
            <para>
            If non-<b>null</b>, that style provides the values for non-ambient properties
            of the current style that have not been explicitly set.
            </para>
            <para>
            If <b>null</b>, such properties have default values.
            </para>
            <para>
            This property is <b>null</b> by default.
            </para>
            </summary>
            <remarks>
            Initially a <see cref="T:C1.Win.C1Document.Style"/> object does not have any
            explicitly set properties. This means that the effective
            values of all ambient properties (such as font) are inherited from
            the style of the containing object, while the effective values
            of all non-ambient properties (such as borders) are inherited
            from the style specified by this property.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.Parents">
            <summary>
            Sets both parents (<see cref="P:C1.Win.C1Document.Style.Parent"/> and <see cref="P:C1.Win.C1Document.Style.AmbientParent"/>) to the same value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Style.Children">
            <summary>
            Gets the collection of child styles
            (i.e. <see cref="T:C1.Win.C1Document.Style"/> objects that have their <see cref="P:C1.Win.C1Document.Style.Parent"/>
            set to the current style).
            </summary>
            <remarks>
            This method always returns a non-<b>null</b> collection of child styles,
            initializing it if it did not exist.
            To test whether a style already has child styles
            without creating the <see cref="P:C1.Win.C1Document.Style.Children"/> collection,
            use the <see cref="P:C1.Win.C1Document.Style.HasChildren"/> property.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.HasChildren">
            <summary>
            Gets a value indicating whether the current style's <see cref="P:C1.Win.C1Document.Style.Children"/>
            collection has been initialized and contains one or more elements.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Style.AmbientParent">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.Style"/> that is the ambient parent of the current style.
            <para>
            If non-<b>null</b>, that style provides the values for ambient properties
            of the current style that have not been explicitly set.
            </para>
            <para>
            If <b>null</b>, such properties are inherited from the style of the containing object.
            </para>
            <para>
            This property is <b>null</b> by default.
            </para>
            </summary>
            <remarks>
            Initially a <see cref="T:C1.Win.C1Document.Style"/> object does not have any
            explicitly set properties. This means that the effective
            values of all ambient properties (such as font) are inherited from
            the style of the containing object, unless this property has
            been set to a non-<b>null</b> value, in which case they are
            inherited from that style.
            <para>
            Note that even if an <b>AmbientParent</b> has been specified,
            only ambient properties that have been explicitly set on
            that style or any of its own ambient parents (styles or containing objects)
            propagate to the current style. See example below for details.
            </para>
            </remarks>
            <example>
            For instance, the following code:
            <code>
                C1PrintDocument doc = new C1PrintDocument();
                RenderArea ra = new RenderArea();
                ra.Style.FontBold = true;
                RenderText rt = new RenderText("my text");
                ra.Style.AmbientParent = doc.Style;
                ra.Children.Add(rt);
                doc.Body.Children.Add(ra);
            </code>
            still prints "my text" in bold, while this code:
            <code>
                C1PrintDocument doc = new C1PrintDocument();
                doc.Style.FontBold = false; // this line makes the difference!
                RenderArea ra = new RenderArea();
                ra.Style.FontBold = true;
                RenderText rt = new RenderText("my text");
                ra.Style.AmbientParent = doc.Style;
                ra.Children.Add(rt);
                doc.Body.Children.Add(ra);
            </code>
            prints "my text" using regular (non-bold) font. This is because
            <see cref="!:C1.C1Preview.Style.FontBold"/> has been explicitly set to <b>false</b>
            on the style assigned to the <b>AmbientParent</b> on the text object.
            </example>
        </member>
        <member name="P:C1.Win.C1Document.Style.BackgroundImage">
            <summary>
            Gets or sets the background image.
            The image is aligned using <see cref="P:C1.Win.C1Document.Style.BackgroundImageAlign"/>.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is no image.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.BackgroundImageName">
            <summary>
            Gets or sets the name of the background image
            in <see cref="P:C1.Win.C1Document.C1Document.Dictionary"/> on the current document.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is emtpy string.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.Brush">
            <summary>
            Gets or sets the brush used to fill the background.
            If both this and <see cref="P:C1.Win.C1Document.Style.BackColor"/> properties are specified for a style,
            the <b>BackColor</b> takes precedence.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is no brush.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.ForeColor">
            <summary>
            Gets or sets the text (foreground) color.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is black color.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.Rotation">
            <summary>
            Gets or sets the rotation angle,
            in degrees counterclockwise from the <b>X</b> axis.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is 0.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.TextAlignHorz">
            <summary>
            Gets or sets the horizontal text alignment.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is left alignment.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.TextAlignVert">
            <summary>
            Gets or sets the vertical text alignment.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is top alignment.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.LineSpacing">
            <summary>
            Gets or sets the line spacing of a text in percent.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is 100% (normal line spacing).</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.WordWrap">
            <summary>
            Gets or sets a value indicating whether text automatically
            wraps to the next line when there is not enough space left on the current line.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>true</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.HyperlinkAttrs">
            <summary>
            Gets or sets a <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs"/> for "normal" (neither visited nor highlighted) hyperlinks.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to highlight hyperlinks with blue text color.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.VisitedHyperlinkAttrs">
            <summary>
            Gets or sets a <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs"/> for visited hyperlinks.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to highlight visited hyperlinks with magenta text color.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.HoverHyperlinkAttrs">
            <summary>
            Gets or sets a <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs"/> for highlighted hyperlinks.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to underline text on a hyperlinks under mouse.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.ActiveHyperlinkAttrs">
            <summary>
            Gets or sets a <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs"/> for active hyperlinks.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to not highlight active hyperlinks.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.TreatLastLineNotEndOfParagraph">
            <summary>
            Obsolete. Use <see cref="P:C1.Win.C1Document.Style.JustifyLastLine"/> instead.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Style.EolIsEndOfParagraph">
            <summary>
            Obsolete. Use <see cref="P:C1.Win.C1Document.Style.JustifyEndOfLines"/> instead.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Style.MeasureTrailingSpaces">
            <summary>
            Gets or sets a value indicating whether spaces at ends of text lines
            are taken into account when measuring the text.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.Padding">
            <summary>
            Gets or sets the padding (white space added between the style owner's content and borders).
            </summary>
            <remarks>
            Padding is within <see cref="P:C1.Win.C1Document.Style.Borders"/> (if any), while <see cref="P:C1.Win.C1Document.Style.Spacing"/> is added outside of borders.
            <para>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            </para>
            <para>The default is no padding.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.Spacing">
            <summary>
            Gets or sets the spacing between the the current style's owner and the surrounding objects.
            </summary>
            <remarks>
            Spacing is outside of <see cref="P:C1.Win.C1Document.Style.Borders"/> (which, in turn, contain <see cref="P:C1.Win.C1Document.Style.Padding"/>).
            <para>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            </para>
            <para>The default is no spacing.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.Borders">
            <summary>
            Gets or sets the borders drawn around the current style's owner object.
            </summary>
            <remarks>
            Borders are drawn within the <see cref="P:C1.Win.C1Document.Style.Spacing"/> area, and contain <see cref="P:C1.Win.C1Document.Style.Padding"/>.
            <para>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            </para>
            <para>The default is no borders.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.Shadow">
            <summary>
            Gets or sets properties of the shadow cast by the current object.
            By default the shadow is invisible due to being 100% transparent.
            Set <b>Shadow.Transparency</b> to a value less than 100, to show shadow.
            Other properties can be adjusted as needed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Style.ImageAlign">
            <summary>
            Gets or sets the foreground image alignment.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is to align to left/top, stretch horizontally and vertically, and keep aspect ratio.</para>
            </remarks>
            <seealso cref="P:C1.Win.C1Document.Style.BackgroundImageAlign"/>
        </member>
        <member name="P:C1.Win.C1Document.Style.BackgroundImageAlign">
            <summary>
            Gets or sets the background image alignment.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is to align to left/top, stretch horizontally and vertically, and keep aspect ratio.</para>
            </remarks>
            <seealso cref="P:C1.Win.C1Document.Style.ImageAlign"/>
        </member>
        <member name="P:C1.Win.C1Document.Style.BackColor">
            <summary>
            Gets or sets the background color.
            If both this and <see cref="P:C1.Win.C1Document.Style.Brush"/> properties are specified for a style,
            this property takes precedence.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is transparent background color.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.MinOrphanLines">
            <summary>
            Gets or sets the minimum number of orphan text lines allowed on a page
            before or after a page break.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is 0.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.ClientAreaOnly">
            <summary>
            Gets or sets a value indicating whether just the client area of a <see cref="T:System.Windows.Forms.Control"/>,
            or the whole control, is rendered by the <see cref="T:C1.Win.C1Document.RenderImage"/> object owning the current style.
            </summary>
            <remarks>
            <para>
            A <see cref="T:C1.Win.C1Document.RenderImage"/> can render an image of a <see cref="T:System.Windows.Forms.Control"/>
            if it is assigned to the <b>RenderImage</b>'s <see cref="!:RenderImage.Control"/> property.
            <b>ClientAreaOnly</b> can be used to indicate that only the client area of that control should be rendered.
            </para>
            <para>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            </para>
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.ShapeFillBrush">
            <summary>
            Gets or sets the brush used to fill internal areas of shapes
            (objects derived from <see cref="!:RenderShapeBase"/>).
            If for a style both this and <see cref="P:C1.Win.C1Document.Style.ShapeFillColor"/> are specified,
            <b>ShapeFillColor</b> takes precedence.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is no brush.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.ShapeFillColor">
            <summary>
            Gets or sets the color used to fill internal areas of shapes
            (objects derived from <see cref="!:RenderShapeBase"/>).
            If for a style both this and <see cref="P:C1.Win.C1Document.Style.ShapeFillBrush"/> are specified,
            this property takes precedence.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is transparent fill color.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.ShapeLine">
            <summary>
            Gets or sets the style of lines used to draw shape objects (RenderLine, RenderRectangle etc).
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is a black line, 1pt thick.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.TextIndent">
            <summary>
            Gets or sets the indentation of the first line in a block of text.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is 0.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.CharSpacing">
            <summary>
            Gets or sets the spacing between characters in a text.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is 0 (normal spacing).</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.CharWidth">
            <summary>
            Gets or sets the amount (in percent) by which to increase or decrease
            the widths of characters in a text.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is 100 (normal width).</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.JustifyLastLine">
            <summary>
            Gets or sets a value indicating whether the last line of text should be justified
            if the current style has <see cref="P:C1.Win.C1Document.Style.TextAlignHorz"/> set to
            <see cref="F:C1.Win.C1Document.AlignHorzEnum.Justify"/> or <see cref="F:C1.Win.C1Document.AlignHorzEnum.JustifyChars"/>.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.JustifyEndOfLines">
            <summary>
            Gets or sets a value indicating whether lines of text
            ending with a newline character should be justified
            if the current style has <see cref="P:C1.Win.C1Document.Style.TextAlignHorz"/> set to
            <see cref="F:C1.Win.C1Document.AlignHorzEnum.Justify"/> or <see cref="F:C1.Win.C1Document.AlignHorzEnum.JustifyChars"/>.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>true</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.WordWrapMode">
            <summary>
            Gets or sets a value indicating how words can be split when text lines wrap.
            <para>
            This property is ignored if <see cref="P:C1.Win.C1Document.Style.WordWrap"/> is <b>false</b>.
            </para>
            <para>
            The default value is <see cref="!:C1.C1Preview.WordWrapMode.Normal"/>
            </para>
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Style.FontName">
            <summary>
            Gets or sets the face name of the font.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is Arial.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.FontSize">
            <summary>
            Gets or sets the em-size of the font.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is 10.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.FontStyle">
            <summary>
            Gets or sets the style of font.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.FontWeight">
            <summary>
            Gets or sets the font weight.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.TextDecoration">
            <summary>
            Gets or sets a value indicating whether the font is underlined.
            </summary>
            <remarks>
            This property is <b>ambient</b> (inherited from the style of the object containing the current style's owner if not explicitly set).
            <para>The default is <b>false</b>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Document.Style.TextPosition">
            <summary>
            Gets or sets a value indicating whether text is rendered
            normally, or as superscript or subscript.
            </summary>
            <remarks>
            This property is <b>non-ambient</b> (inherited from the <see cref="P:C1.Win.C1Document.Style.Parent"/> of the current style if not explicitly set).
            <para>The default is normal text.</para>
            </remarks>
        </member>
        <member name="T:C1.Win.C1Document.PropsHashTable`1">
            <summary>
            <para>For internal use only.</para>
            Represents a hashtable of properties and their values.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PropsHashTable`1.Clear">
            <summary>
            Clears the current instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PropsHashTable`1.GetPropIndex(System.Int32)">
            <summary>
            Gets the index of a property in the <see cref="P:C1.Win.C1Document.PropsHashTable`1.Keys"/> and <see cref="P:C1.Win.C1Document.PropsHashTable`1.Values"/> arrays.
            </summary>
            <param name="propKey">The property key.</param>
            <returns>The 0-based index of the specified property in the <see cref="P:C1.Win.C1Document.PropsHashTable`1.Keys"/> and <see cref="P:C1.Win.C1Document.PropsHashTable`1.Values"/> arrays.</returns>
        </member>
        <member name="M:C1.Win.C1Document.PropsHashTable`1.SetPropValue(System.Int32,`0)">
            <summary>
            Sets the value of a property.
            </summary>
            <param name="propKey">The property key.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:C1.Win.C1Document.PropsHashTable`1.DeletePropValue(System.Int32)">
            <summary>
            Deletes a property value from the current <see cref="!:PropsHashtable&lt;T&gt;"/>.
            </summary>
            <param name="propKey">The property key to remove.</param>
        </member>
        <member name="M:C1.Win.C1Document.PropsHashTable`1.IsEmpty">
            <summary>
            Gets a value indicating whether the current <see cref="!:PropsHashtable&lt;T&gt;"/> is empty.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PropsHashTable`1.IsPropExists(System.Int32)">
            <summary>
            Tests whether a property is set in the current <see cref="!:PropsHashtable&lt;T&gt;"/>.
            </summary>
            <param name="propKey">The property key.</param>
            <returns><b>true</b> if the specified property has been set on the current <see cref="!:PropsHashtable&lt;T&gt;"/>, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Document.PropsHashTable`1.Count">
            <summary>
            Gets the number of properties set on the current <see cref="!:PropsHashtable&lt;T&gt;"/>.
            This value is equal to the number of elements in the <see cref="P:C1.Win.C1Document.PropsHashTable`1.Keys"/> and <see cref="P:C1.Win.C1Document.PropsHashTable`1.Values"/> collections.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PropsHashTable`1.Flags">
            <summary>
            Gets the array of flags.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PropsHashTable`1.Keys">
            <summary>
            Gets the array of property keys set in the current <see cref="!:PropsHashtable&lt;T&gt;"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.PropsHashTable`1.Values">
            <summary>
            Gets the array of property values set on the current <see cref="!:PropsHashtable&lt;T&gt;"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.StyleCollection">
            <summary>
            Represents a collection of <see cref="T:C1.Win.C1Document.Style"/> objects.
            This is the type of the <see cref="P:C1.Win.C1Document.Style.Children"/> collection
            on a <see cref="T:C1.Win.C1Document.Style"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.StyleCollection.Owner">
            <summary>
            Gets <see cref="T:C1.Win.C1Document.Style"/> object owning this collection.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.UnitTypeEnum">
            <summary>
            Enumerates units of measurement used in a <see cref="T:C1.Win.C1Document.C1Document"/>,
            used by <see cref="T:C1.Win.C1Document.Unit"/> and related types.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Document">
            <summary>
            Specifies the document unit (1/300 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Inch">
            <summary>
            Specifies the inch as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Mm">
            <summary>
            Specifies the millimeter as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Pica">
            <summary>
            Specifies the pica unit (1/6 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Pixel">
            <summary>
            Specifies a device pixel as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Point">
            <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Twip">
            <summary>
            Specifies a twip (1/1440 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.InHs">
            <summary>
            Specifies a hundredths of an inch as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Display">
            <summary>
            Specifies 1/75 inch as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Cm">
            <summary>
            Specifies centimetre's as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Dip">
            <summary>
            Specifies DIP's 1/96 inch as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Percent">
            <summary>
            Specifies a size or coordinate as percent of parent's size.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.UnitTypeEnum.Auto">
            <summary>
            Specifies an automatic dimension or coordinate.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Unit">
            <summary>
            A structure representing a single coordinate or dimension of an object
            (e.g. <see cref="!:RenderObject.X"/> or <see cref="!:RenderObject.Height"/> of a <see cref="T:C1.Win.C1Document.RenderObject"/>)
            in a <see cref="!:C1PrintDocument"/>.
            </summary>
            <remarks>
            <para>
            The value may be "auto", absolute (e.g. "5mm"), or a percent of parent width/height.
            See <see cref="M:C1.Win.C1Document.Unit.#ctor(System.String)"/> for more details.
            </para>
            </remarks>
        </member>
        <member name="F:C1.Win.C1Document.Unit.MmPerInch">
            <summary>Millimeters per inch as double.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.DocumentUnitsPerInch">
            <summary>Document units per inch as double.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.PointsPerInch">
            <summary>Points per inch as double.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.TwipsPerInch">
            <summary>Twips per inch as double.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.PicaPerInch">
            <summary>Picas per inch as double.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.CmPerInch">
            <summary>Centimeters per inch as double.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.DisplayPerInch">
            <summary>Display units per inch as double.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.DipPerInch">
            <summary>DIP units per inch as double.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.MmPerInchF">
            <summary>Millimeters per inch as float.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.DocumentUnitsPerInchF">
            <summary>Document units per inch as float.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.PointsPerInchF">
            <summary>Points per inch as float.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.TwipsPerInchF">
            <summary>Twips per inch as float.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.PicaPerInchF">
            <summary>Picas per inch as float.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.CmPerInchF">
            <summary>Centimeters per inch as float.</summary>
        </member>
        <member name="F:C1.Win.C1Document.Unit.DisplayPerInchF">
            <summary>Display units per inch as float.</summary>
        </member>
        <member name="M:C1.Win.C1Document.Unit.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Unit"/> structure
            from a string. See <b>remarks</b> for details.
            </summary>
            <param name="str">A string representing the value.</param>
            
            <remarks>
            <para>(In the description that follows, <b>"object"</b> means a <see cref="T:C1.Win.C1Document.RenderObject"/>
            or another document object on which the current <b>Unit</b> represents a dimension
            or a coordinate, not the <b>Unit</b> structure itself.)
            </para>
            
            The <paramref name="str"/> string should contain a valid <see cref="T:C1.Win.C1Document.Unit"/> value
            in one of the following forms:
            <list type="bullet">
            <item>
            Auto, represented by the string <b>"auto"</b>.
            The exact semantics depend on the type of object with which the current unit is associated.
            </item>
            
            <item>
            An unqualified numeric value, e.g. <b>"8"</b> or <b>"100.12"</b>.
            <para>In this case <see cref="!:C1PrintDocument.DefaultUnit"/> determines the unit of measurement.</para>
            </item>
            
            <item>
            A numeric value qualified with unit of measurement, e.g. <b>"28mm"</b> or <b>"7in"</b>.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Document.Unit.#ctor(System.Double,C1.Win.C1Document.UnitTypeEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.Unit"/> structure
            with an absolute length value.
            </summary>
            <param name="value">The unit value.</param>
            <param name="unitType">The unit of measurement.</param>
        </member>
        <member name="M:C1.Win.C1Document.Unit.ToString">
            <summary>
            Converts the current object to a string.
            </summary>
            <returns>The string representing the current <see cref="T:C1.Win.C1Document.Unit"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.Equals(System.Object)">
            <summary>
            Compares the current unit value with another object.
            </summary>
            <param name="obj">The object to compare the current with.</param>
            <returns><b>true</b> if the two objects repesent the same unit value, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.GetHashCode">
            <summary>
            Gets the hash code for the current unit value.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.ConvertToDef">
            <summary>
            Converts value to units specified by <see cref="F:C1.Win.C1Document.C1Document.DefaultUnit"/> constant.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.StringToUnitType(System.String,C1.Win.C1Document.UnitTypeEnum@)">
            <summary>
            Converts a string to a <see cref="T:C1.Win.C1Document.UnitTypeEnum"/> value. The string can be one of the following:
            "def", "doc", "in", "mm", "pc", "pix", "pt", "tw", "inhs".
            This method is case-insensitive.
            </summary>
            <param name="s">The string to convert. If it is null or empty, <see cref="!:UnitTypeEnum.Default"/> is returned.</param>
            <param name="value">OUT: On exit, contains the <see cref="T:C1.Win.C1Document.UnitTypeEnum"/> value.</param>
            <returns><b>true</b> if no error occurred, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.UnitTypeToString(C1.Win.C1Document.UnitTypeEnum)">
            <summary>
            Converts a <see cref="T:C1.Win.C1Document.UnitTypeEnum"/> value to a string representation as in
            the following table:
            <list type="bullet">
            <item><description><term>Default</term>Empty string</description></item>
            <item><description><term>Document</term>"doc"</description></item>
            <item><description><term>Inch</term>"in"</description></item>
            <item><description><term>Millimeter</term>"mm"</description></item>
            <item><description><term>Pica</term>"pc"</description></item>
            <item><description><term>Pixel</term>"pix"</description></item>
            <item><description><term>Point</term>"pt"</description></item>
            <item><description><term>Twip</term>"tw"</description></item>
            <item><description><term>InHs</term>"inhs"</description></item>
            <item><description><term>Centimeters</term>"cm"</description></item>
            <item><description><term>Percent</term>"%"</description></item>
            </list>
            </summary>
            <param name="value">A <see cref="T:C1.Win.C1Document.UnitTypeEnum"/> to convert.</param>
            <returns>The string representing <paramref name="value"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.op_Equality(C1.Win.C1Document.Unit,C1.Win.C1Document.Unit)">
            <summary>
            Tests whether the two unit values are equal.
            </summary>
            <param name="u1">The first unit value.</param>
            <param name="u2">The second unit value.</param>
            <returns><b>true</b> if the two units are equal, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.op_Inequality(C1.Win.C1Document.Unit,C1.Win.C1Document.Unit)">
            <summary>
            Tests whether the two unit values are not equal.
            </summary>
            <param name="u1">The first unit value.</param>
            <param name="u2">The second unit value.</param>
            <returns><b>true</b> if the two units are not equal, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.op_Implicit(C1.Win.C1Document.Unit)~System.Double">
            <summary>
            Returns the absolute value of a <see cref="T:C1.Win.C1Document.Unit"/> expressed in <see cref="!:UnitTypeEnum.Default"/> units.
            <para>Throws exception if the operation cannot be performed.</para>
            </summary>
            <param name="value">The unit value to convert.</param>
            <returns>The absolute value.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.op_Implicit(C1.Win.C1Document.Unit)~System.String">
            <summary>
            Converts a unit value to a string.
            </summary>
            <param name="value">The unit to convert.</param>
            <returns>The string representing the unit value.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.op_Implicit(System.Double)~C1.Win.C1Document.Unit">
            <summary>
            Converts a <b>double</b> value to a <see cref="T:C1.Win.C1Document.Unit"/> using <see cref="!:UnitTypeEnum.Default"/> units.
            </summary>
            <param name="value">The <b>double</b> value.</param>
            <returns>The unit value.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.op_Implicit(System.Int32)~C1.Win.C1Document.Unit">
            <summary>
            Converts an integer value to a <see cref="T:C1.Win.C1Document.Unit"/> using <see cref="!:UnitTypeEnum.Default"/> units.
            </summary>
            <param name="value">The integer value.</param>
            <returns>The unit value.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.op_Implicit(System.String)~C1.Win.C1Document.Unit">
            <summary>
            Converts a string to a <see cref="T:C1.Win.C1Document.Unit"/> value (see <see cref="M:C1.Win.C1Document.Unit.#ctor(System.String)"/>.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>The unit value.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.TryParse(System.String,System.Double@,C1.Win.C1Document.UnitTypeEnum@)">
            <summary>
            Parses a string and gets <see cref="P:C1.Win.C1Document.Unit.Value"/> and <see cref="!:Unit.Utits"/> from that string.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="value">OUT: value of <see cref="T:C1.Win.C1Document.Unit"/> structure.</param>
            <param name="units">OUT: units of <see cref="T:C1.Win.C1Document.Unit"/> structure.</param>
            <returns>A <b>true</b> if conversion was successfull.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.TryParse(System.String,C1.Win.C1Document.Unit@)">
            <summary>
            Parses a string and creates <see cref="T:C1.Win.C1Document.Unit"/> structure.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="unit">OUT: <see cref="T:C1.Win.C1Document.Unit"/> structure.</param>
            <returns>True if the conversion was successfull, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.Parse(System.String)">
            <summary>
            Parses a string and creates a <see cref="T:C1.Win.C1Document.Unit"/> instance from that string,
            throws an exception if string is invalid.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>A <see cref="T:C1.Win.C1Document.Unit"/> instance.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Unit.Convert(System.Double,C1.Win.C1Document.UnitTypeEnum,C1.Win.C1Document.UnitTypeEnum)">
            <summary>
            Converts a value from one unit of measurement to another.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="from">The source unit of measurement.</param>
            <param name="to">The target unit of measurement.</param>
            <returns><paramref name="value"/> converted to <paramref name="to"/> units.</returns>
        </member>
        <member name="P:C1.Win.C1Document.Unit.IsAbs">
            <summary>
            Gets a value indicating whether the current unit represents an absolute value
            (such as "1mm", "2in" and so on).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Unit.IsZero">
            <summary>
            Gets a value indicating whether the current unit represents an zero value ("0mm", "0%" and so on).
            Returns <b>false</b> if current unit is "auto" or "default".
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Unit.Value">
            <summary>
            Gets the absolute value of the current unit (in <see cref="P:C1.Win.C1Document.Unit.Units"/>).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.Unit.Units">
            <summary>
            Gets the unit of measurement of the current unit.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.NotifyCollection`1">
            <summary>
            Represents a collection with notifications.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:C1.Win.C1Document.INotifyCollection">
            <summary>
            Notifies listeners of dynamic changes, such as when items get added and removed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.INotifyCollection.CollectionChanging">
            <summary>
            Occurs when a collection about to be changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.INotifyCollection.CollectionChanged">
            <summary>
            Occurs when a collection changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.NotifyCollection`1.CollectionChanging">
            <summary>
            Occurs when a collection about to be changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.NotifyCollection`1.CollectionChanged">
            <summary>
            Occurs when a collection changed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1Brush">
            <summary>
            Abstract base class for brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1Brush.IsVisible(C1.Win.Interop.Rect)">
            <summary>
            Tests whether the current brush is visible within the specified bounds.
            </summary>
            <param name="bounds">The bounds to test.</param>
            <returns>True if the brush is visible, false otherwise.</returns>
        </member>
        <member name="T:C1.Win.C1Document.Graphics.C1Graphics">
            <summary>
            Base class implements drawing surface for <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Graphics.C1Graphics.ToPixes(C1.Win.C1Document.Unit)">
            <summary>
            Converts <see cref="T:C1.Win.C1Document.Unit"/> value to pixels of this <see cref="!:C1Graphics."/>
            </summary>
            <param name="unit">The <see cref="T:C1.Win.C1Document.Unit"/> value.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Graphics.C1Graphics.ToPixels(System.Double)">
            <summary>
            Converts value specified in <see cref="F:C1.Win.C1Document.C1Document.DefaultUnit"/> to value
            in pixels of this <see cref="T:C1.Win.C1Document.Graphics.C1Graphics"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Graphics.C1Graphics.ToPixels(C1.Win.C1Document.Offsets)">
            <summary>
            Converts <see cref="T:C1.Win.Interop.Thickness"/> value specified in <see cref="F:C1.Win.C1Document.C1Document.DefaultUnit"/>
            to value in pixels of this <see cref="T:C1.Win.C1Document.Graphics.C1Graphics"/>.
            </summary>
            <param name="offsets"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Graphics.C1Graphics.ToPixels(C1.Win.Interop.Rect)">
            <summary>
            Converts <see cref="T:C1.Win.Interop.Rect"/> value specified in <see cref="F:C1.Win.C1Document.C1Document.DefaultUnit"/>
            to value in pixels of this <see cref="T:C1.Win.C1Document.Graphics.C1Graphics"/>.
            </summary>
            <param name="offsets"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Graphics.C1Graphics.FromPixels(System.Double)">
            <summary>
            Converts value specified pixels of this <see cref="T:C1.Win.C1Document.Graphics.C1Graphics"/> to value
            specified in <see cref="F:C1.Win.C1Document.C1Document.DefaultUnit"/> units.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Graphics.C1Graphics.InflateHalfLine(C1.Win.Interop.Rect,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Inflates rectangle.
            This method considers specific of graphics context, for example,
            for GDI surface this method uses following calculation:
            rect.Left = rect.Left - left / 2 - left % 2
            rect.Width = rect.Width + left / 2 + left % 2 + right / 2 + right % 2
            Because GDI surface uses "integer" pixels.
            </summary>
            <param name="rect"></param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Graphics.C1Graphics.DeflateHalfLine(C1.Win.Interop.Rect,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            See comments for: <see cref="M:C1.Win.C1Document.Graphics.C1Graphics.InflateHalfLine(C1.Win.Interop.Rect,System.Double,System.Double,System.Double,System.Double)"/>.
            </summary>
            <param name="rect"></param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Graphics.C1Graphics.CreateClipRegion(C1.Win.C1Document.Graphics.IPath)">
            <summary>
            Creates clip region for specified graphics path.
            </summary>
            <param name="graphicsPath"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Graphics.C1Graphics.CreateClipRegion(C1.Win.Interop.Rect)">
            <summary>
            Creates clip region for specified bounds.
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Graphics.C1Graphics.CreatePath">
            <summary>
            Creates graphics path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Graphics.C1Graphics.CreateRoundBordersClipRegion(C1.Win.C1Document.BorderParams)">
            <summary>
            Creates clip region for specified border.
            </summary>
            <param name="borders"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.Graphics.INativeImage">
            <summary>
            For internal use.
            Represents native image depending on current <see cref="T:C1.Win.C1Document.Graphics.C1Graphics"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Graphics.INativeImage.GetSize">
            <summary>
            Returns size of the image in pixels.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.Graphics.IClipRegion">
            <summary>
            Represents clip region.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Graphics.IPath">
            <summary>
            For internal use.
            Behavior similar to: http://msdn.microsoft.com/en-us/library/windows/desktop/dd316578(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Graphics.IPathSink">
            <summary>
            For internal use.
            Behavior similar to: http://msdn.microsoft.com/en-us/library/windows/desktop/dd316592(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DXTextLayout.Metrics">
            <summary>
            Contains metrics of the <see cref="T:C1.Win.C1Document.C1DXTextLayout"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DXTextLayout.Metrics.Width">
            <summary>
            Width of the <see cref="T:C1.Win.C1Document.C1DXTextLayout"/> in DIP's.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DXTextLayout.Metrics.Height">
            <summary>
            Height of the <see cref="T:C1.Win.C1Document.C1DXTextLayout"/> in DIP's.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DXTextLayout.Metrics.LineCount">
            <summary>
            Count of text lines.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1DXTextLayout.HitTestInfo">
            <summary>
            Describes the region of the <see cref="T:C1.Win.C1Document.C1DXTextLayout"/> obtained by a hit test.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DXTextLayout.HitTestInfo.StartPosition">
            <summary>
            The first text position within the hit region.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DXTextLayout.HitTestInfo.Length">
            <summary>
            The number of text positions within the hit region.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DXTextLayout.HitTestInfo.Bounds">
            <summary>
            Bounds of the of the hit region.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.C1DXTextLayout.HitTestInfo.BidiLevel">
            <summary>
            The BIDI level of the text positions within the hit region.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DXTextLayout.HitTestInfo.IsText">
            <summary>
            true if the hit region contains text; otherwise, false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DXTextLayout.HitTestInfo.IsTrimmed">
            <summary>
            true if the text range is trimmed; otherwise, false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DXTextLayout.HitTestInfo.IsTrailingHit">
            <summary>
            Indicates whether the hit-test location is at the leading or the trailing
            side of the character. When the <see cref="P:C1.Win.C1Document.C1DXTextLayout.HitTestInfo.IsInside"/> value is set to FALSE,
            this value is set according to the <see cref="F:C1.Win.C1Document.C1DXTextLayout.HitTestInfo.StartPosition"/> value to represent the edge closest to the hit-test location.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DXTextLayout.HitTestInfo.IsInside">
            <summary>
            Indicates whether the hit-test location is inside the text string.
            When FALSE, the position nearest the text's edge is returned.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1DXTextLayout.HitTestInfo.TextPosition">
            <summary>
            Contains position in text where cursor should be placed, this 
            value equals to <see cref="F:C1.Win.C1Document.C1DXTextLayout.HitTestInfo.StartPosition"/> if <see cref="P:C1.Win.C1Document.C1DXTextLayout.HitTestInfo.IsTrailingHit"/> is false
            and equals <see cref="F:C1.Win.C1Document.C1DXTextLayout.HitTestInfo.StartPosition"/> + 1 if <see cref="P:C1.Win.C1Document.C1DXTextLayout.HitTestInfo.IsTrailingHit"/> is true.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Graphics.ArcSize">
            <summary>
            For internal use.
            See: http://msdn.microsoft.com/en-us/library/windows/desktop/dd368068(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Graphics.SweepDirection">
            <summary>
            For internal use.
            See: http://msdn.microsoft.com/en-us/library/windows/desktop/dd368166(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Graphics.FigureBegin">
            <summary>
            For internal use.
            See: http://msdn.microsoft.com/en-us/library/windows/desktop/dd368106(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Graphics.FigureEnd">
            <summary>
            For internal use.
            See: http://msdn.microsoft.com/en-us/library/windows/desktop/dd368108(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Graphics.ArcSegment">
            <summary>
            For internal use.
            See: http://msdn.microsoft.com/en-us/library/windows/desktop/dd368065(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.Graphics.FillMode">
            <summary>
            For internal use.
            See: http://msdn.microsoft.com/en-us/library/windows/desktop/dd368110(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1HyperlinkAttrs">
            <summary>
            Represents the visual attributes of a text hyperlink in a certain state.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1HyperlinkAttrs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1HyperlinkAttrs.#ctor(System.Drawing.Color,System.Drawing.Color,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs"/> class,
            assigning background and foreground colors and <see cref="P:C1.Win.C1Document.C1HyperlinkAttrs.Underline"/> property.
            </summary>
            <param name="backColor">The background color of the hyperlink text.</param>
            <param name="foreColor">The foreground color of the hyperlink text.</param>
            <param name="underline">A value indicating whether the hyperlink text should be underlined.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1HyperlinkAttrs.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs"/> class,
            assigning <see cref="P:C1.Win.C1Document.C1HyperlinkAttrs.Underline"/> property.
            </summary>
            <param name="underline">A value indicating whether the hyperlink text should be underlined.</param>
        </member>
        <member name="M:C1.Win.C1Document.C1HyperlinkAttrs.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            This method compares properties on the two objects.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><b>true</b> if the specified Object is equal to the current object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:C1.Win.C1Document.C1HyperlinkAttrs.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs"/>.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="P:C1.Win.C1Document.C1HyperlinkAttrs.BackColor">
            <summary>
            Gets the background color.
            If this value indicates an empty or transparent color,
            the background color of a hyperlink is not changed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1HyperlinkAttrs.ForeColor">
            <summary>
            Gets the foreground (text) color.
            If this value indicates an empty or transparent color,
            the text color of a hyperlink is not changed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1HyperlinkAttrs.Underline">
            <summary>
            Gets a value indicating whether the text of a hyperlink is underlined.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1HyperlinkAttrs.VisitedDefault">
            <summary>
            Gets the default attributes of visited hyperlinks.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1HyperlinkAttrs.NormalDefault">
            <summary>
            Gets the default attributes of "normal" (neither visited nor highlighted) hyperlinks.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.C1HyperlinkAttrs.HoverDefault">
            <summary>
            Gets the default attributes of highlighted hyperlinks.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.C1ImageFormat">
            <summary>
            Represets image format.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.C1SortedList`2.Add(`0,`1)">
            <summary>
            Adds value to the list, returns index of the added value, throws exception if value with specified key already exists.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.FC">
            <summary>
            <para>For internal use.</para>
            Implements the static methods for comparing the float and double numbers
            with specified precision.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.FC.Contains(C1.Win.Interop.Rect,C1.Win.Interop.Rect)">
            <summary>
            For internal use.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.Contains(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <param name="p11"></param>
            <param name="p12"></param>
            <param name="p21"></param>
            <param name="p22"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.AreIntersecting(C1.Win.Interop.Rect,C1.Win.Interop.Rect)">
            <summary>
            For internal use.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.AreIntersecting(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <param name="p11"></param>
            <param name="p12"></param>
            <param name="p21"></param>
            <param name="p22"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.EQ(C1.Win.Interop.Rect,C1.Win.Interop.Rect)">
            <summary>
            For internal use.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.EQ(System.Single,System.Single)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.EQ(System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.LEQ(System.Single,System.Single)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.LEQ(System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.GEQ(System.Single,System.Single)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.GEQ(System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.L(System.Single,System.Single)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.L(System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.G(System.Single,System.Single)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.FC.G(System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.PageArea">
            <summary>
            Lists values identifying a page's area.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.HitTestInfo">
            <summary>
            Contains information about a specific point within <see cref="T:C1.Win.C1Document.C1Page"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.HitTestInfo.IsSameArea(C1.Win.C1Document.HitTestInfo)">
            <summary>
            Compares this <see cref="T:C1.Win.C1Document.HitTestInfo"/> object with another <see cref="T:C1.Win.C1Document.HitTestInfo"/> object and returns value indicating whether objects
            identifying same areas.
            </summary>
            <param name="hti"><see cref="T:C1.Win.C1Document.HitTestInfo"/> object to compare.</param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Document.HitTestInfo.IsInsideText">
            <summary>
            Gets or sets value indicating whether text position specified by the <see cref="P:C1.Win.C1Document.HitTestInfo.TextPosition"/> property
            is directly under test point, if this property is <b>false</b> then <see cref="P:C1.Win.C1Document.HitTestInfo.TextPosition"/>
            specifies  text position <b>nearest</b> to test point.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.HitTestInfo.TextPosition">
            <summary>
            Gets or sets the text <see cref="T:C1.Win.C1Document.C1DocumentTextPosition"/> structure defining text position corresponding to test point.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.HitTestInfo.PageArea">
            <summary>
            Gets or sets a value identifying the type of an area located under the test point.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.HitTestInfo.ToolTip">
            <summary>
            Gets or sets the tooltip of area.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.HitTestInfo.Hyperlink">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.C1Hyperlink"/> of area.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.HitTestInfo.Fragment">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Document.RenderFragment"/> under test point.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.AsyncActionProgressHandler`1">
            <summary>
            Represents a method that handles progress update events of an asynchronous action that provides progress updates.
            </summary>
            <typeparam name="TProgress">The type of the progress data.</typeparam>
            <param name="asyncInfo">The asynchronous action.</param>
            <param name="progressInfo">The progress information.</param>
        </member>
        <member name="T:C1.Win.C1Document.AsyncActionWithProgressCompletedHandler`1">
            <summary>
            Represents a method that handles the completed event of an asynchronous action that provides progress updates.
            </summary>
            <typeparam name="TProgress">The type of the progress data.</typeparam>
            <param name="asyncInfo">The asynchronous action.</param>
            <param name="asyncStatus">The status of asynchronous action.</param>
        </member>
        <member name="T:C1.Win.C1Document.AsyncStatus">
            <summary>
            Specifies the status of an asynchronous operation.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AsyncStatus.Started">
            <summary>
            The operation has started.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AsyncStatus.Completed">
            <summary>
            The operation has completed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AsyncStatus.Canceled">
            <summary>
            The operation was canceled.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AsyncStatus.Error">
            <summary>
            The operation has encountered an error.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.AsyncOperationProgressHandler`2">
            <summary>
            Represents a method that handles progress update events of an asynchronous operation that provides progress updates.
            </summary>
            <typeparam name="TProgress">The type of the progress data.</typeparam>
            <param name="asyncInfo">The asynchronous operation.</param>
            <param name="progressInfo">The progress information.</param>
        </member>
        <member name="T:C1.Win.C1Document.AsyncOperationWithProgressCompletedHandler`2">
            <summary>
            Represents a method that handles the completed event of an asynchronous operation that provides progress updates.
            </summary>
            <typeparam name="TProgress">The type of the progress data.</typeparam>
            <param name="asyncInfo">The asynchronous operation.</param>
            <param name="asyncStatus">The status of asynchronous action.</param>
        </member>
        <member name="T:C1.Win.C1Document.CollectionAction">
            <summary>
            Describes the action that caused a
            <see cref="E:C1.Win.C1Document.INotifyCollection.CollectionChanging"/> or <see cref="E:C1.Win.C1Document.INotifyCollection.CollectionChanged"/> events.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.CollectionAction.Insert">
            <summary>
            Item added to the collection.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.CollectionAction.Remove">
            <summary>
            Item removed from the collection.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.CollectionAction.Set">
            <summary>
            Items replaced in the collection.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.CollectionAction.Clear">
            <summary>
            Collection cleared.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.NotifyCollectionEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1Document.INotifyCollection.CollectionChanged"/> and <see cref="E:C1.Win.C1Document.INotifyCollection.CollectionChanging"/> events.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.NotifyCollectionEventArgs.#ctor(C1.Win.C1Document.CollectionAction,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.NotifyCollectionEventArgs"/> class.
            </summary>
            <param name="action">The action that caused the event.</param>
            <param name="index">The index of the item that is affected by the change.</param>
        </member>
        <member name="P:C1.Win.C1Document.NotifyCollectionEventArgs.Action">
            <summary>
            Gets the action that caused the event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.NotifyCollectionEventArgs.Index">
            <summary>
            Gets the index of the item that is affected by the change.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.NotifyCollectionEventHandler">
            <summary>
            Represents a method that handles the <see cref="!:INotifyCollection.PropertyChanged"/> or <see cref="!:INotifyCollection.PropertyChanging"/> events.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="T:C1.Win.C1Document.PropertyNotifyEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1Document.INotifyObject.PropertyChanged"/> and <see cref="E:C1.Win.C1Document.INotifyObject.PropertyChanging"/> events.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.PropertyNotifyEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PropertyNotifyEventArgs class.
            </summary>
            <param name="propertyName">The name of the property that changing or changed.</param>
        </member>
        <member name="P:C1.Win.C1Document.PropertyNotifyEventArgs.PropertyName">
            <summary>
            Gets the name of the property that changing or changed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.PropertyNotifyEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1Document.INotifyObject.PropertyChanged"/> or <see cref="E:C1.Win.C1Document.INotifyObject.PropertyChanging"/> events raised when a property is changed or chaning on an object.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Document.INotifyObject">
            <summary>
            Notifies clients that a property value about to be changed or already has changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.INotifyObject.PropertyChanging">
            <summary>
            Occurs when a property value about to be changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Document.INotifyObject.PropertyChanged">
            <summary>
            Occurs when a property value changed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.LineStyle">
            <summary>
            Specifies the style of lines in C1Document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.LineStyle.Solid">
            <summary>
            Specifies a solid line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.LineStyle.Dash">
            <summary>
            Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.LineStyle.Dot">
            <summary>
            Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.LineStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.LineStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.LineDef">
            <summary>
            Represents a set of attributes used to draw lines.
            This class is immutable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.LineDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.LineDef"/> class
            with default values (1pt wide black line).
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.LineDef.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.LineDef"/> class,
            assigning line color.
            </summary>
            <param name="color">A value assigned to the <see cref="P:C1.Win.C1Document.LineDef.Color"/> property.</param>
        </member>
        <member name="M:C1.Win.C1Document.LineDef.#ctor(C1.Win.C1Document.Unit,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.LineDef"/> class,
            assigning line width and color.
            </summary>
            <param name="width">A value assigned to the <see cref="P:C1.Win.C1Document.LineDef.Width"/> property.</param>
            <param name="color">A value assigned to the <see cref="P:C1.Win.C1Document.LineDef.Color"/> property.</param>
        </member>
        <member name="M:C1.Win.C1Document.LineDef.#ctor(C1.Win.C1Document.Unit,System.Drawing.Color,C1.Win.C1Document.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.LineDef"/> class,
            assigning line width, color and dash style.
            </summary>
            <param name="width">A value assigned to the <see cref="P:C1.Win.C1Document.LineDef.Width"/> property.</param>
            <param name="color">A value assigned to the <see cref="P:C1.Win.C1Document.LineDef.Color"/> property.</param>
            <param name="style">A value assigned to the <see cref="P:C1.Win.C1Document.LineDef.Style"/> property.</param>
        </member>
        <member name="M:C1.Win.C1Document.LineDef.#ctor(C1.Win.C1Document.Unit,System.Drawing.Color,System.Drawing.Color,C1.Win.C1Document.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.LineDef"/> class,
            assigning line width, color, dash background color and dash style.
            </summary>
            <param name="width">A value assigned to the <see cref="P:C1.Win.C1Document.LineDef.Width"/> property.</param>
            <param name="color">A value assigned to the <see cref="P:C1.Win.C1Document.LineDef.Color"/> property.</param>
            <param name="backColor">A value assigned to the <see cref="P:C1.Win.C1Document.LineDef.BackColor"/> property.</param>
            <param name="style">A value assigned to the <see cref="P:C1.Win.C1Document.LineDef.Style"/> property.</param>
        </member>
        <member name="M:C1.Win.C1Document.LineDef.IsSameStyle(C1.Win.C1Document.LineDef)">
            <summary>
            Tests whether the current and another <see cref="T:C1.Win.C1Document.LineDef"/> objects define
            same line styles - i.e. whether the values of <see cref="P:C1.Win.C1Document.LineDef.Color"/>,
            <see cref="P:C1.Win.C1Document.LineDef.BackColor"/>, <see cref="!:LineDef.DashStyle"/> and
            <see cref="!:LineDef.DashPattern"/> properties are the same.
            Note that this method does NOT compare the lines' widths.
            </summary>
            <param name="line">A <see cref="T:C1.Win.C1Document.LineDef"/> to compare to the current one.</param>
            <returns><b>true</b> if the two lines have same styles, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.LineDef.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:C1.Win.C1Document.LineDef"/> object is equal to the current object.
            This method compares the property values on the objects.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><b>true</b> if the specified object's properties are equal to the current one's, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.LineDef.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:C1.Win.C1Document.LineDef"/> type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="P:C1.Win.C1Document.LineDef.Color">
            <summary>
            Gets the line color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.LineDef.Width">
            <summary>
            Gets the line width (thickness).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.LineDef.BackColor">
            <summary>
            Gets the the background color of spaces between the dashes of a dashed line.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.LineDef.Style">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.LineStyle"/> of the current <see cref="T:C1.Win.C1Document.LineDef"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.LineDef.Empty">
            <summary>
            Represents an empty line (with emtpy color and zero width).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.LineDef.Default">
            <summary>
            Represents the default regular line (solid black, 1pt wide).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.LineDef.DefaultBold">
            <summary>
            Represents the default bold line (solid black, 2pt wide).
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.LongOperationEventArgs">
            <summary>
            Describes arguments for the event fired periodically by a potentially
            long operation. Allows to provide feedback to the user and may also
            allow to cancel the operation.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.LongOperationEventArgs.#ctor">
            <summary>
            Creates a new instance of LongOperationEventArgs with default
            properties (Complete=0, CanCancel=false).
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.LongOperationEventArgs.#ctor(System.Double)">
            <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified complete value and CanCancel=false.
            </summary>
            <param name="complete">How much is complete (from 0 to 1).</param>
        </member>
        <member name="M:C1.Win.C1Document.LongOperationEventArgs.#ctor(System.Double,System.Boolean)">
            <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified complete and CanCancel values.
            </summary>
            <param name="complete">How much is complete (from 0 to 1).</param>
            <param name="canCancel">Whether the operation can be cancelled.</param>
        </member>
        <member name="M:C1.Win.C1Document.LongOperationEventArgs.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified CanCancel value and Complete=0.
            </summary>
            <param name="canCancel">Whether the operation can be cancelled.</param>
        </member>
        <member name="P:C1.Win.C1Document.LongOperationEventArgs.Complete">
            <summary>
            Gets the approximate completed ratio, from 0 (0% complete) to 1 (100% complete).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.LongOperationEventArgs.CanCancel">
            <summary>
            Gets the value indicating whether the event handler can cancel the current long operation
            by setting the <see cref="P:C1.Win.C1Document.LongOperationEventArgs.Cancel"/> property to <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.LongOperationEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the current long operation
            should be cancelled. (This property is ignored if <see cref="P:C1.Win.C1Document.LongOperationEventArgs.CanCancel"/> is <b>false</b>.)
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.LongOperationEventHandler">
            <summary>
            Represents a method that can handle a long operation event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:C1.Win.C1Document.LongOperationEventArgs"/> that contains event data.</param>
        </member>
        <member name="T:C1.Win.C1Document.OutlineNode">
            <summary>
            Represents an outline node within a <see cref="T:C1.Win.C1Document.C1Document"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.OutlineNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.OutlineNode"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.OutlineNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Document.OutlineNode"/> class.
            </summary>
            <param name="caption">The node caption.</param>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.Owner">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.OutlineNodeCollection"/> containing the current node.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.Parent">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.OutlineNode"/> which is the parent of the current node.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.Level">
            <summary>
            Gets the nesting level of the current node within the nodes' tree
            (top-level nodes have level 0).
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.Caption">
            <summary>
            Gets or sets the UI string used to represent the current node.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.LinkTarget">
            <summary>
            Determines the target of the current hyperlink.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.Image">
            <summary>
            Gets or sets the image used to represent the current node.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.ImageName">
            <summary>
            Gets or sets the name in the <see cref="P:C1.Win.C1Document.C1Document.Dictionary"/> of the icon used to represent the current node.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.Children">
            <summary>
            Gets the collection of child nodes of the current node.
            Note that accessing this property initializes the collection if it has not been initialized yet.
            To test whether there are child nodes without this side effect, use the <see cref="P:C1.Win.C1Document.OutlineNode.HasChildren"/> property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.HasChildren">
            <summary>
            Gets a value indicating whether the <see cref="P:C1.Win.C1Document.OutlineNode.Children"/> collection of the current node
            has been initialized and contains at least one element.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.TopParent">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.OutlineNode"/> that is the root of the current node tree.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNode.Document">
            <summary>
            Gets the <see cref="T:C1.Win.C1Document.C1Document"/> containing the current node tree.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.OutlineNodeCollection">
            <summary>
            Represents collection of the <see cref="T:C1.Win.C1Document.OutlineNode"/> objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1Document.OutlineNodeCollection.Document">
            <summary>
            Gets a <see cref="T:C1.Win.C1Document.C1Document"/> object containing this object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.OutputRangeType">
            <summary>
            Specifies the type of an <see cref="T:C1.Win.C1Document.OutputRange"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.OutputRangeType.All">
            <summary>
            All pages of the document are in the range.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.OutputRangeType.PageList">
            <summary>
            Pages that are in the range are specified as a list.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.OutputRangeType.PageRange">
            <summary>
            One or more ranges of pages are specified.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.OutputRange">
            <summary>
            Describes a part of the document (pages or objects) that is to be
            exported or printed.
            Note: all page numbers are 1-based.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.OutputRange.All">
            <summary>
            Represents an all-inclusive range.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.#ctor">
            <summary>
            Creates a new instance of the output range that includes all pages in the document.
            Note that enumerating the resulting range must be broken by the client.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an instance of OutputRange that includes a single interval of
            pages. FromPage may be greater than ToPage, in that case the range is
            inverted.
            </summary>
            <param name="fromPage">The number of the first page to include (1-based).</param>
            <param name="toPage">The number of the last page to include (1-based).</param>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.#ctor(System.Int32[])">
            <summary>
            Creates an instance of OutputRange that includes all pages with
            numbers specified in the list.
            </summary>
            <param name="pageNumbers">The array of page numbers to include.</param>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.#ctor(System.String)">
            <summary>
            Creates an instance of OutputRange that includes pages specified by the
            string parameter.
            The string may contain:
            - page numbers (1-based) separated by spaces or commas;
            - dashes ('-') to specify intervals (a dash at the end implies infinity).
            </summary>
            <param name="pages">The pages to be included.</param>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.ToString">
            <summary>
            Returns a string that represents the current OutputRange.
            </summary>
            <returns>A string that represents the range.</returns>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.Contains(System.Int32)">
            <summary>
            Tests whether the specified page is within the range.
            </summary>
            <param name="pageNumber">The page number to test.</param>
            <returns>True if the page is in the range, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.GetEnumerator(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates and returns a new enumerator that allows to loop
            through all pages in the range.
            </summary>
            <param name="minPageNumber">Minimum page number used if page range specified as "-2".</param>
            <param name="maxPageNumber">Maximum page number used if page range specified as "2-".</param>
            <param name="inverted">Gets or sets the value indicating whether the range should be inverted.
            If the range is inverted, the range's iterator goes from the end of the range backwards.</param>
            <returns>The new enumerator.</returns>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.GetEnumerator(System.Int32,System.Int32)">
            <summary>
            Creates and returns a new enumerator that allows to loop
            through all pages in the range.
            </summary>
            <param name="minPageNumber">Minimum page number used if page range specified as "-2".</param>
            <param name="maxPageNumber">Maximum page number used if page range specified as "2-".</param>
            <returns>The new enumerator.</returns>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.GetEnumerator(System.Int32)">
            <summary>
            Creates and returns a new enumerator that allows to loop
            through all pages in the range.
            </summary>
            <param name="maxPageNumber">Maximum page number used if page range specified as "2-".</param>
            <returns>The new enumerator.</returns>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.GetEnumerator">
            <summary>
            Creates and returns a new enumerator that allows to loop
            through all pages in the range.
            </summary>
            <returns>The new enumerator.</returns>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.GetPageCount(System.Int32,System.Int32)">
            <summary>
            Gets the total number of pages in the range, int.MaxValue returned for
            OutputRange.All.
            </summary>
            <value></value>
        </member>
        <member name="P:C1.Win.C1Document.OutputRange.Type">
            <summary>
            Type of range: all pages, range of pages etc.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.OutputRange.Enumerator">
            <summary>
            Allows to enumerate all pages in the range.
            Note: It is the client reesponsibility to take steps
            to avoid infinite loops if the OutputRange
            was created without specifying a valid MaxPageNumber.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.Enumerator.#ctor(C1.Win.C1Document.OutputRange,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the OutputRange enumerator.
            </summary>
            <param name="range"></param>
            <param name="minPageNumber"></param>
            <param name="maxPageNumber"></param>
            <param name="inverted"></param>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.Enumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.OutputRange.Enumerator.MoveNext">
            <summary>
            Moves to the next page number in the range.
            </summary>
            <returns>True if there are more pages in the range.</returns>
        </member>
        <member name="P:C1.Win.C1Document.OutputRange.Enumerator.Current">
            <summary>
            Gets the current page number.
            </summary>
            <value>The current page number.</value>
        </member>
        <member name="T:C1.Win.C1Document.Utils">
            <summary>
            Contains common functions.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Utils.AlignDir(System.Double,System.Double,C1.Win.C1Document.Utils.ImageAlignBaseEnum,System.Boolean,System.Double@,System.Int32@)">
            <summary>
            Internal, used from AlignImage() only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Document.Utils.SamePaperSizes(C1.Win.Interop.Size,C1.Win.Interop.Size)">
            <summary>
            Tests two sizes for equality allowing a small margin for rounding errors.
            </summary>
            <param name="size1">The first size to compare.</param>
            <param name="size2">The second size to compare.</param>
            <returns>True if the two sizes are reasonably close, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies content of one stream to another.
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
        </member>
        <member name="M:C1.Win.C1Document.Utils.GetResourceStream(System.Reflection.Assembly,System.String)">
            <summary>
            Gets resource stream from specified assembly.
            </summary>
            <param name="asmb"></param>
            <param name="resName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.AlignImage(C1.Win.Interop.Size,C1.Win.C1Document.IImageAlign,C1.Win.Interop.Rect)">
            <summary>
            Aligns the image (represented by its size) within the specified rectangle.
            </summary>
            <param name="imageSize">The source image size.</param>
            <param name="align">Alignment to use.</param>
            <param name="alignRect">The target rectangle.</param>
            <returns>The <see cref="T:C1.Win.C1Document.Utils.ImageAlignInfo"/> object describing how the image should be drawn.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.IsNumber(System.Object)">
            <summary>
            Checks whether object represents numeric value, i.e. it is byte, integer, float etc.
            </summary>
            <param name="obj">Object to check.</param>
            <returns><b>true</b> if object represents numeric value, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.AsNumber(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Document.Utils.FindTextInstances(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds instances of text in a string.
            </summary>
            <param name="what">The text to search for.</param>
            <param name="where">The string to search.</param>
            <param name="fromIdx">Index in "where" to start search at.</param>
            <param name="length">Length of substring to search in.</param>
            <param name="maxCount">Max number of instances to find.</param>
            <param name="forward">Search direction.</param>
            <param name="matchCase">Ignore case.</param>
            <param name="word">Whole word search.</param>
            <returns>Array of indexes into "where" to the found instances.</returns>
        </member>
        <member name="T:C1.Win.C1Document.Utils.ImageAlignInfo">
            <summary>
            Holds calculated data needed to draw the aligned image.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute">
            <summary>
            Allows to redefine default enduser localize options for
            property, field or class.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Properties">
            <summary>
            Defines the list of properties that should be localized.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.ExcludedMembers">
            <summary>
            Defines a list of members of control that should be excluded from localization.
            Currently used only AddControlToResources application for automatically generating
            control resources.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Exclude">
            <summary>
            If true then class, property or field will be not displayed for 
            enduser localization.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description">
            <summary>
            Gets the description of string that will be displayed in the
            end user localizer in design-time.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.StringsType">
            <summary>
            Gets or sets type providing string used to localize <see cref="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Key">
            <summary>
            Gets or sets resource key containing localized string for <see cref="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description"/>.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the StringsManager and Strings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the StringsManager and Strings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetC1BuiltinResourceStream(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Returns ResourceStream for "official" resources
            that provided only by C1, typicallly those resources contains
            design-time strings.
            Those resources can be only in main control assembly like C1.C1Preview.2.dll 
            and name of resource should have following format:
            CulturePrefix.StringsTypeName
            for example:
            ja.C1.C1Preview.Design.DesignStrings.resx
            </summary>
            <param name="resourceName"></param>
            <param name="assembly"></param>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetParentCulture(System.String)">
            <summary>
            Returns the parent of the CultureInfo passed in. Differs from ci.Parent
            in that while ci can be equal to ci.Parent, this method it never returns
            the passed ci itself, rather it would return null.
            Also this function has special handling for chinese culture.
            Under NET2 it returns "zh" culture name for
            neutral "zh-Hans" and "zh-Hant" chinese cultures, under
            NET2 "zh" is not exists.
            </summary>
            <param name="cultureName">The culture name to get parent for.</param>
            <returns>The parent of the culture info, or null.</returns>
        </member>
        <member name="T:C1.Util.Win.Win32.DM">
            <summary>
            Fiels of DEVMODE structure.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GetDeviceCapsConsts">
            <summary>
            GetDeviceCaps() constants
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SORT">
            <summary>
            Sorting IDs.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.LANG">
            <summary>
            Primary language IDs.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SUBLANG">
             <summary>
              Sublanguage IDs.
            
              The name immediately following SUBLANG_ dictates which primary
              language ID that sublanguage ID can be combined with to form a
              valid language ID.
             </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.LOCALE">
            <summary>
            Locale Types.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.FixFpu">
            <summary>
            usage:
             using (FixFpu ff = new FixFpu())
             { do printer stuff }
            or
             do printer stuff
             FixFpu.Doit();
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.AboutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProviderInfo">
            <summary>
            <para>Provides static <see cref="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)"/> methods that 
            should be called from the constructors of licensed classes.</para>
            <para>Also provides a static <see cref="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)"/> method that can 
            be called to show the about box with product and licensing information.</para>
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>Check the <b>ShouldNag</b> property of the returned <see cref="T:C1.Util.Licensing.LicenseInfo"/> 
            to determine whether the licensed class should nag the user. This value is set
            to true in situations where a valid license was not found but a nag dialog
            could not be displayed. In these cases, the licensed class is supposed to nag
            in some other way (with a watermark for example).</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Boolean)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <param name="showNagDialog">Whether the nag dialog should be displayed when a valid license is not found.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>This overload was created for use in WPF. It should be called in the control's constructor
            in order to support license persistence correctly. But it should not show the nag dialog until the
            control is fully loaded, or the VS designer may remain blank.</para>
            <para>So the solution is this:</para>
            <code>
            LicenseInfo _licInfo;
            public LicensedControl()
            {
              // check license but don't nag yet
              _licInfo = ProviderInfo.Validate(typeof(LicensedControl), this, false);
              
              // perform licensing after control is fully loaded
              Loaded += LicensedControl_Loaded;
            }
            void LicensedControl_Loaded(object sender, RoutedEventArgs e)
            {
              // nag after loading
              if (_licInfo.ShouldNag)
              {
                ProviderInfo.ShowAboutBox(this);
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Nag(System.Type,C1.Util.Licensing.LicenseInfo,System.Boolean)">
            <summary>
            Nag user by showing AboutBox with license information.
            Show it only once per day per assembly.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="li"><see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</param>
            <param name="designTime">Whether we're running at design or run time.</param>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Reflection.Assembly,System.String)">
            <summary>
            Version of Validate used by constructors that take runtime keys.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object.</param>
            <param name="callingAsm">Assembly that contains the owner licensed control.</param>
            <param name="runtimeKey">Any valid C1 runtime key.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the runtime key.</returns>
            <remarks>
            <para>This allows a licensed C1 class to create other C1 objects bypassing 
            license verification for the child objects.</para>
            <para>For extra safety, we check that the owner object is defined in an assembly
            the contains a 'C1ProductInfo' attribute.</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateDesigntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Design time validation. Looks for a license in the registry and saves it in the
            provided <see cref="T:System.ComponentModel.LicenseContext"/>.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
            <remarks>
            Call this method from application-type products (that always require a license to be
            installed in the registry). In this case, the <paramref name="context"/> parameter 
            should be set to null.
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateRuntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Runtime validation.
            Looks for a runtime key stored in the current application's resources.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)">
            <summary>
            Shows the About Box for an instance of a C1 product.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.GetC1Type(System.Object)">
            <summary>
            Get the type whose assembly contains a 'C1ProductInfoAttribute'.
            </summary>
            <param name="instance">Instance of an object whose type is to be checked.</param>
            <returns>The type whose assembly contains a 'C1ProductInfoAttribute'</returns>
        </member>
        <member name="T:C1.Util.Licensing.LicenseInfo">
            <summary>
            Contains information about a license stored in an application.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus,C1.Util.Licensing.ProductLicense)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.LicenseStatus">
            <summary>
            Gets or sets the status of this license (valid, expired, unlicensed).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.License">
            <summary>
            Gets or sets the <see cref="T:C1.Util.Licensing.ProductLicense"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.Type">
            <summary>
            Gets or sets the <see cref="P:C1.Util.Licensing.LicenseInfo.Type"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysElapsed">
            <summary>
            Gets the number of evaluation days elapsed.
            Returns -1 for valid licenses.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysLeft">
            <summary>
            Gets the number of evaluation days still left.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.ShouldNag">
            <summary>
            Gets or sets a value that determines whether the caller should
            nag the user. This is the case when the component/control is 
            not licensed, but is not running in interactive mode. So we can't
            show a dialog and the caller is supposed to nag some other way
            (typically by adding watermarks to the UI or output).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsValid">
            <summary>
            Gets a value that determines whether the license found is valid.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsExpired">
            <summary>
            Gets a value that determines whether the license found is expired.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsLocalHost">
            <summary>
            Gets a value that determines whether the component is running under
            localhost and therefore should not nag the user with alert dialogs.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.SafeLicenseContext">
            <summary>
            
            Provides a version of GetSavedLicenseKey that doesn't require
            special permissions.
            
            The code was mostly copied from the .NET framework, but then changed 
            in a few places to require fewer permissions (assembly name, file io, 
            etc). 
            
            The main change is the use of a custom deserializer to read Hashtable 
            objects instead of the original BinaryFormatter, which requires
            permissions.
            
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AboutNameAttribute">
            <summary>
            Attribute used to specify the product name shown on the About Box.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1ProductInfoAttribute">
            <summary>
            Attribute used to attach licensing/product information to assemblies.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProductLicense">
            <summary>
            Represents a license for a product (e.g. C1BarCode, C1Studio Enterprise).
            
            Provides methods for:
            - generating new license keys (administrative task)
            - checking license key validity (used by installer and products)
            - generating and checking runtime keys (used by products)
            - installing/uninstalling licenses (used by installer)
            
            The install/uninstall code requires elevated permissions, and is
            used only by setups and utilities (not by controls). The code is 
            implemented in the ProductLicense.Installer.cs, which controls should
            not include since it won't be useful to them.
            
            When a product is sold, we send the user a license KEY. The user installs
            a license on his machine by providing his name, his company name, and the 
            key.
            
            The <see cref="P:C1.Util.Licensing.ProductLicense.Key"/> is a string in the following format:
            
                AAQYYCC-XX-NNNNNN-DD-DZZZZZZ
                
            Where:
            
                AA:     Product code (should match one of the products in the 
                        product catalog (see ProductInformation.GetProductCatalog()).
                Q:      Quarter when the license key was issued (1, 2, or 3)
                YY:     Year when the license key was issued (e.g., 10 for 2010)
                CC:     Order code, two chars that indicate whether this is a 
                        new sale, upgrade, renewal, special offer, etc.
                XX:     Hash code to ensure key validity.
                NNNNNN: Unique serial number.
                DDD:    Vendor code, three chars
                ZZZZZZ: Combination of random numbers for uniqueness and extra hash.
                
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VerString">
            <summary>
            WinForms version string representation (4 dot-delimited numbers).
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VersionStr">
            <summary>
            Same as <see cref="F:C1.Util.Licensing.VersionConst.VerString"/>.
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VerAsmName">
            <summary>
            For .NET 4.0 version only, used for designer assembly names.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.AssemblyNames">
            <summary>
            Specifies assembly name parts, used by AssemblyCommonInfo to generate actual assembly names.
            </summary>
        </member>
        <member name="T:C1.Win.C1Document.AssemblyNames">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Document.AssemblyNames.AsmName_C1Document_4_Design">
            <summary>
            Version-qualified C1.C1Report.4.Design assembly name.
            </summary>
        </member>
    </members>
</doc>
