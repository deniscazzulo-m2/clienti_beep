<SyntaxLanguage Key="VB.NET" LanguageDefinitionVersion="4.0" Secure="True"
				xmlns="http://ActiproSoftware/SyntaxEditor/4.0/LanguageDefinition">

	<!-- String Properties -->
	<Properties>
    <Property Key="Creator" Value="WEST CONSULTING" /> 
    <Property Key="Copyright" Value="Copyright (c) 2001-2012 WCS All rights reserved." /> 
	</Properties>

	
	<!-- Highlighting Styles -->	
	<Styles>
		<Style Key="ReservedWordStyle" ForeColor="Blue" />
		<Style Key="FunctionStyle" ForeColor="Magenta" /> 
		<Style Key="MethodStyle" ForeColor="DarkOrange" /> 
		<Style Key="NativeTypeStyle" ForeColor="Red" />
		<Style Key="OperatorStyle" ForeColor="Gray" Bold="False" />
		<Style Key="ReservedWordOperatorStyle" ForeColor="Blue" />
		<Style Key="NumberStyle" ForeColor="Maroon" Bold="True" />
		<Style Key="StringDelimiterStyle" ForeColor="Red" />
		<Style Key="StringDefaultStyle" ForeColor="Red" />
		<Style Key="SystemVariableStyle" ForeColor="Green" Bold="True" /> 
		<Style Key="CommentDelimiterStyle" ForeColor="Green" />
		<Style Key="CommentDefaultStyle" ForeColor="Green" />
		<Style Key="TagStyle" ForeColor="Maroon" Bold="True" /> 

		<Style Key="XMLCommentDelimiterStyle" ForeColor="Gray" />
		<Style Key="XMLCommentTagStyle" ForeColor="Gray" />
		<Style Key="XMLCommentDefaultStyle" ForeColor="Green" />

		<Style Key="PreProcessorDirectiveKeywordStyle" Name="Pre-Processor Directive Keyword" ForeColor="Blue" />
		<Style Key="PreProcessorDirectiveDefaultStyle" Name="Pre-Processor Directive Default" ForeColor="Black" />
	</Styles>
	
	<!-- States -->
	<States>
		<!-- Code -->
		<State Key="DefaultState">
			<!-- Patterns Groups -->
			<PatternGroups>
				<!-- Whitespace -->
				<RegexPatternGroup TokenKey="WhitespaceToken" PatternValue="{WhitespaceMacro}+" IsWhitespace="True" />
				<!-- Line Terminators -->
				<RegexPatternGroup TokenKey="LineTerminatorToken" PatternValue="{LineTerminatorMacro}" IsWhitespace="True" />
				<!-- Brackets -->
				<ExplicitPatternGroup Key="OpenParenthesisPatternGroup" TokenKey="OpenParenthesisToken" PatternValue="(" EndBracket="CloseParenthesisPatternGroup" />
				<ExplicitPatternGroup Key="CloseParenthesisPatternGroup" TokenKey="CloseParenthesisToken" PatternValue=")" StartBracket="OpenParenthesisPatternGroup" />
				
        <!-- Exit Reserved Words -->
        <!--
				<ExplicitPatternGroup TokenKey="ExitReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="Exit Sub" />
					<ExplicitPattern Value="Exit Function" />
					<ExplicitPattern Value="Exit Property" />
					<ExplicitPattern Value="Exit" />
				</ExplicitPatternGroup>
				-->
				
        <!-- Foldable Start Reserved Words -->
        <!--
				<ExplicitPatternGroup TokenKey="SubReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="Sub" />
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="FunctionReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="Function" />
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="PropertyReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="Property" />
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="ClassReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="Class" />
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="InterfaceReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="Interface" />
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="EnumReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="Enum" />
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="StructureReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="Structure" />
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="ModuleReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="Module" />
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="NamespaceReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="Namespace" />
				</ExplicitPatternGroup>
				-->
				
				<!-- Foldable End Reserved Words -->
				<!--
				<ExplicitPatternGroup TokenKey="EndSubReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="End Sub" />
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="EndFunctionReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="End Function" />
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="EndPropertyReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="End Property" />
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="EndClassReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="End Class" />
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="EndInterfaceReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="End Interface" />
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="EndEnumReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="End Enum" />
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="EndStructureReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="End Structure" />
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="EndModuleReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="End Module" />
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="EndNamespaceReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPattern Value="End Namespace" />
				</ExplicitPatternGroup>
				-->
        				
				<!-- Punctuation -->
				<ExplicitPatternGroup TokenKey="PunctuationToken">
					<ExplicitPatterns>
						. ,
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				
        <!-- Native Types -->
				<ExplicitPatternGroup TokenKey="NativeTypeToken" Style="NativeTypeStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPatterns>
						$
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				
        <!-- Booleans -->
				<ExplicitPatternGroup TokenKey="BooleanToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPatterns>
						False True
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				
				<!--  System Variables   --> 
        <RegexPatternGroup TokenKey="SystemVariableToken" Style="SystemVariableStyle" PatternValue="@ {WordMacro}+" LookAhead="{NonWordMacro}" /> 
				
        <!-- Me -->
        <!--
				<ExplicitPatternGroup TokenKey="MeToken" PatternValue="Me" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect"/>
				-->
				
        <!-- Reserved Word Operators -->
				<ExplicitPatternGroup TokenKey="ReservedWordOperatorToken" Style="ReservedWordOperatorStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
					<ExplicitPatterns>
						And Or
						count get set bof eof open openinput openoutput
            read write fileread filewrite update delete addnew find movefirst moveprevious movenext movelast moveaddnew
            enabled disabled visible hidden
            kill clear close
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				
				<!-- TAG Types -->
				<ExplicitPatternGroup TokenKey="TagToken" Style="TagStyle" LookAhead="{NonWordMacro}">
					<ExplicitPatterns> 
            [SQL] [/SQL] [FORMULA] [/FORMULA]
            Open Layout Addnew RowStyle RowColChange 
            BeforeUpdate AfterUpdate BeforeDelete AfterDelete
            Close Total
            BeforeEdit AfterEdit DoubleClick ButtonClick HeadClick
            Style Fill Click
            InsertCommand UpdateCommand DeleteCommand
					</ExplicitPatterns>
				</ExplicitPatternGroup>

				
        <!-- Reserved Words -->
		<ExplicitPatternGroup TokenKey="ReservedWordToken" Style="ReservedWordStyle" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect">
			<ExplicitPatterns>
						DIM IF ELSEIF ELSE ENDIF END THEN
            FOR EXITFOR EXIT TO NEXT
            WHILE UNTIL EXITWHILE EXIT WEND DO EXITDO 
            LOOP RETURN CLEAR STOP
            PRINT 
            SHOWMENU 
            SHOWQT SHOWCM
            DATAREFRESH DATAREBIND DataRefreshIndexes DataRebindIndexes            
            DATATOTAL DATASAVE DATADELETE 
            DATASHOW DATAHIDE DATAFOCUS DATAFIND DATAFILTER
            AllowRedim FormPage FormDataSectionVisible FormSize FormFocus FormDataRefresh FormDataRefreshIndexes
            DataLock DataUnlock DataEnable DataDisable
            DataVisible DataLocked DataEnabled
            DataRowsDelete DataRowsCopy DataRowsPaste
            AppDateMinMaxSet AppDateMinMaxCheck
            GridAllow GridAllowAUD
            MenuBar MsgOk MsgBox MsgWait MsgAlert MouseWait MsgSetParam MsgSetParams
			      LayoutDesign 
            DbExecuteSSP GridLayoutDynamic
            Delay Timer SerialPortList SerialPortOpen SerialPortClose SerialPortWrite
			      LanMsnNotify LanMsnAttachOpen LanMsnAttachExport
			      DialogGridOkEnabled DialogGridRefreshValues DialogGridResetValues
            ValueSetOnGrid ValueSetOnForm
            ViesVatNumberCheckTable
            MailSendBackground
            RamFlush
			</ExplicitPatterns>
		</ExplicitPatternGroup>
				
				
				<ExplicitPatternGroup TokenKey="FunctionToken" Style="FunctionStyle" LookAhead="{NonWordMacro}">
            <ExplicitPatterns>
              StringUndo StringQuoted
              AppInfoAdd AppInfoExist AppInfoGet AppInfoSet AppInfoRemove AppBit
              FormInfoAdd FormInfoExist FormInfoGet FormInfoSet FormInfoRemove
              ValueExist ValueGet ValueSet ValueString ValueGetCurrent
              FieldCurrentValue FieldCurrentName
              ReturnGet ReturnGetRows ReturnGetID ReturnGetResult ReturnGetOk ReturnReset
              StrParseN StrSplit StrSplitEx StrIn
              DialogForm DialogDate DialogGrid DialogGridValues DialogChoice DialogPrdForm DialogString
			        PrdFormEval
              RunCommand RunFile RunProcess 
              File FreeFile FileExist FileNameTmp FileNameSplit FileTableImport FileTableExport
              FileOpen FilesOpen FileSave FilePath FileTextRead FileTextWrite 
              PathExist PathCreate PathDelete PathListFiles PathListDirs
              GridIsOnAddnew GridIsOnEdit GridList GridFilteredList GridSelected GridSelectedList
		          GridData GridDataFilterGet GridDataFilterSet
              GridDataRefresh GridDataRefreshIndexes
              GridItemGet GridItemSet
              GridCheckedCount GridCheckedTotal GridCheckedList 
			        GridExport
              DataChanged DataIndex DataOnAddnew DataRaiseOnEdit DataReturn DataLocalize
              DbBinaryUpdate DbBinarySave
              DbRead DbReadTokens DbReadNamed DbTokenValue DbNamedValue DbNamedList DbTokensClear DbNamedClear
              DbReader DbReaderOpen 
              DbExecute DbQueryFieldsList
              DbConnOpen DbConnClose DbConnRead DbConnReader DbConnReaderOpen DbConnExecute
              DibaElab DibaCServElab DibaCServValue CycleElab CycleDibaQta CycleDibaValue
              CalcSupp
              FileSaveFromBase64
              Show ShowForm ShowModal ShowDrop ShowRowForm ShowDoc ShowDocAny ShowQuery ShowEditor
              ShowCalendar ShowCalc ShowCalcUpDown ShowKeyboard ShowNumPad
              
              ScriptSyntaxCheck
              ItemChecked ItemValue
              
              FormCommand FormClose FormEmbedded FormItemSet
              DocInfoGet DocInfoSet
              DocIsOk DocRowIsOk DocEditIsOk DocIsOpen DocIsNew DocIsLocked DocRowIsLocked
              DocChangedSet
              DocDataDialog DocParDialog DocPrdFormDialog DocDibaElab 
              DocMagMovDiba
              DocOpen DocSave DocDelete DocReport DocMove 
              DocNew DocNewFrom DocNewMenu DocCopyFrom DocCopyMenu DocRefresh DocBarRefresh
              DocNumSplit DocNumJoin DocNumIsNew
                            
              HttpDownloadString HttpDownloadFile HttpUploadString HttpUploadFile HttpRequest
              PrettifyXML DecodeP7M
                 
              Report ReportAttach ReportExport ReportMany ReportGrid
              ReportDesigner ReportDesign ReportSourceImport ReportSourceExport
              Attach AttachFiles AttachSchema AttachSchemaAny AttachOpen AttachExport AttachExportMany AttachPrintMany AttachMailMany
              MailCompose MailOpen MailSend MailSmtpCheck
              
              InternetConnected FtpFileUpload FtpFileDownload FtpFileExist FtpFileDelete
			  
			  PrintersList
              EcrOpen EcrCommand EcrQuery EcrClose EcrTicket EcrTicketPOS
              
              MediaGridExport MediaGridImport MediaFileExport MediaFileImport MediaImageImport MediaFilePlay MediaPlay
              ByNameGET ByNameSET ByNameRUN
              DoEvents
              Abs Asc CDec CDecimal Chr
              Date DateAdd DateDiff DateExpand DateFull DateDay DateMonth DateYear DateItem DatePeriod
              Time Format FormatDate IIf IfEmpty IfEmptyOrSpaces IfZero IfNegative
              InStr InStrRev Int IsDate IsNumeric
              LCase Left Len LTrim Mid
              MsgChoice MsgSiNo MsgKU MsgYN MsgYNU MsgUseIcon
              Replace Right Round RTrim Str Trim TrimX UCase Val Mod Pow Sqrt
              ZAK          
              
              ViesVatNumberCheck
              CalendarDateGet CalendarDateSet
              FeXmlValidate FeXmlValidateContent
            </ExplicitPatterns> 
        </ExplicitPatternGroup>


        <!-- Operators -->
				<ExplicitPatternGroup TokenKey="MethodToken" Style="MethodStyle">
					<ExplicitPatterns>
            Chars Length Concat Contains StartsWith EndsWith Format IndexOf LastIndexOf Insert PadLeft PadRight
            Remove Replace Substring ToLower ToUpper Trim TrimEnd TrimStart
  
            Add Ceiling Compare Divide Floor Multiply Floor Negate Parse Remainder 
            Round Subtract ToString Truncate
					</ExplicitPatterns>
				</ExplicitPatternGroup>


				
        <!-- Identifier -->
				<RegexPatternGroup TokenKey="IdentifierToken" PatternValue="(_ | {AlphaMacro})({WordMacro})*" />
				
        <!-- Operators -->
				<ExplicitPatternGroup TokenKey="OperatorToken" Style="OperatorStyle">
					<ExplicitPatterns>
						{0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16} {17} {18} {19}
						\{0\} \{1\} \{2\} \{3\} \{4\} \{5\} \{6\} \{7\} \{8\} \{9\} \{10\} \{11\} \{12\} \{13\} \{14\} \{15\} \{16\} \{17\} \{18\} \{19\}
						{VALUE}
						% = &lt;&gt; 
						! | + - * / \ ^ &amp; 
						&lt;= &lt; &gt;= &gt; 
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				
        <!-- Numbers -->
				<RegexPatternGroup TokenKey="RealNumberToken" Style="NumberStyle" LookAhead="{NonWordMacro}|\z">
					<RegexPattern Value="{DigitMacro}* \. {DigitMacro}+ ([Ee] [\+\-]? {DigitMacro}+)?" />
					<RegexPattern Value="{DigitMacro}+ [Ee] [\+\-]? {DigitMacro}+" />
				</RegexPatternGroup>
				<RegexPatternGroup TokenKey="IntegerNumberToken" Style="NumberStyle" PatternValue="{DigitMacro}+" LookAhead="{NonWordMacro}|\z" />
				<RegexPatternGroup TokenKey="HexIntegerNumberToken" Style="NumberStyle" PatternValue="&amp; [hH] {HexDigitMacro}+" LookAhead="{NonWordMacro}|\z" />
			</PatternGroups>
			
      <!-- Child States -->
			<ChildStates>
				<ChildState Key="StringState" />
				<ChildState Key="XMLCommentState" />
				<ChildState Key="CommentState" />
				<ChildState Key="MultiLineCommentState" />
				<ChildState Key="PreProcessorDirectiveState" />
			</ChildStates>
		</State>

		<!-- Strings -->
		<State Key="StringState" TokenKey="StringDefaultToken" Style="StringDefaultStyle">
			<!-- Scopes -->
			<Scopes>
				<Scope>
					<ExplicitPatternGroup Type="StartScope" TokenKey="StringStartToken" Style="StringDelimiterStyle" PatternValue="&quot;" />
					<RegexPatternGroup Type="EndScope" TokenKey="StringEndToken" Style="StringDelimiterStyle" PatternValue="[\&quot;\n]" />
				</Scope>
			</Scopes>
			<!-- Patterns Groups -->
			<PatternGroups>
				<ExplicitPatternGroup TokenKey="StringEscapedCharacterToken" PatternValue="&quot;&quot;" />
				<RegexPatternGroup TokenKey="StringDefaultToken2" PatternValue="[^\&quot;\n]+" />
			</PatternGroups>
		</State>

		<!-- Comments -->
		<State Key="CommentState" TokenKey="CommentDefaultToken" Style="CommentDefaultStyle">
			<!-- Scopes -->
			<Scopes>
				<Scope>
					<ExplicitPatternGroup Type="StartScope" TokenKey="CommentStartToken" Style="CommentDelimiterStyle" PatternValue="'" />
					<RegexPatternGroup Type="EndScope" TokenKey="CommentEndToken" Style="CommentDelimiterStyle" PatternValue="{LineTerminatorMacro}" IsWhitespace="True" />
				</Scope>
				<Scope>
					<ExplicitPatternGroup Type="StartScope" TokenKey="CommentStartToken" Style="CommentDelimiterStyle" PatternValue="REM" LookBehind="^|[^\.]" LookAhead="{NonWordMacro}|\z" />
					<RegexPatternGroup Type="EndScope" TokenKey="CommentEndToken" Style="CommentDelimiterStyle" PatternValue="{LineTerminatorMacro}" IsWhitespace="True" />	
				</Scope>
			</Scopes>
			
      <!-- Patterns Groups -->
			<PatternGroups>
				<RegexPatternGroup TokenKey="CommentDefaultToken" PatternValue="{NonLineTerminatorMacro}+" />
			</PatternGroups>
		</State>

		<!-- MultiLine Comments -->
		<State Key="MultiLineCommentState" TokenKey="MultiLineCommentDefaultToken" Style="CommentDefaultStyle">
			<!-- Scopes -->
			<Scopes>
				<Scope BracketHighlight="True">
					<ExplicitPatternGroup Type="StartScope" TokenKey="MultiLineCommentStartToken" Style="CommentDelimiterStyle" PatternValue="/*" />
					<ExplicitPatternGroup Type="EndScope" TokenKey="MultiLineCommentEndToken" Style="CommentDelimiterStyle" PatternValue="*/" />	
				</Scope>
			</Scopes>
			<!-- Patterns Groups -->
			<PatternGroups>
				<RegexPatternGroup TokenKey="MultiLineCommentDefaultToken" PatternValue="[^\*]+" />
			</PatternGroups>
		</State>

		<!-- XML Comments -->
		<State Key="XMLCommentState" TokenKey="XMLCommentDefaultToken" Style="XMLCommentDefaultStyle">
			<!-- Scopes -->
			<Scopes>
				<Scope>
					<ExplicitPatternGroup Type="StartScope" TokenKey="XMLCommentStartToken" Style="XMLCommentDelimiterStyle" PatternValue="'''" />
					<RegexPatternGroup Type="EndScope" TokenKey="XMLCommentEndToken" Style="XMLCommentDelimiterStyle" PatternValue="{LineTerminatorMacro}" IsWhitespace="True" />	
				</Scope>
			</Scopes>
			
      <!-- Patterns Groups -->
			<PatternGroups>
				<RegexPatternGroup TokenKey="XMLCommentDelimiterToken" Style="XMLCommentDelimiterStyle" PatternValue="'''" />
				<RegexPatternGroup TokenKey="XMLCommentStartTagToken" Style="XMLCommentTagStyle" PatternValue="&lt; [^\n&gt;]* [\n&gt;]" />
				<RegexPatternGroup TokenKey="XMLCommentEndTagToken" Style="XMLCommentTagStyle" PatternValue="&lt;/ [^\n&gt;]* [\n&gt;]" />
				<RegexPatternGroup TokenKey="XMLCommentWhitespaceToken" PatternValue="{WhitespaceMacro}+" IsWhitespace="True" />
				<RegexPatternGroup TokenKey="XMLCommentLineTerminatorToken" PatternValue="{LineTerminatorMacro}" LookAhead="{LineTerminatorWhitespaceMacro}* '''" IsWhitespace="True" />
				<RegexPatternGroup TokenKey="XMLCommentWordToken" PatternValue="\w+" />
				<RegexPatternGroup TokenKey="XMLCommentDefaultToken" PatternValue="{NonLineTerminatorMacro}" />
			</PatternGroups>
		</State>
		
		<!-- Pre-Processor Directives -->
		<State Key="PreProcessorDirectiveState" TokenKey="PreProcessorDirectiveDefaultToken" Style="PreProcessorDirectiveDefaultStyle">
			<!-- Scopes -->
			<Scopes>
				<Scope>
					<ExplicitPatternGroup Type="StartScope" TokenKey="RegionPreProcessorDirectiveStartToken" Style="PreProcessorDirectiveKeywordStyle" PatternValue="#Region" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect" />
					<RegexPatternGroup Type="EndScope" TokenKey="PreProcessorDirectiveEndToken" Style="DefaultStyle" PatternValue="{LineTerminatorMacro}" IsWhitespace="True" />	
				</Scope>
				<Scope>
					<ExplicitPatternGroup Type="StartScope" TokenKey="EndRegionPreProcessorDirectiveStartToken" Style="PreProcessorDirectiveKeywordStyle" PatternValue="#End Region" LookAhead="{NonWordMacro}|\z" CaseSensitivity="AutoCorrect" />
					<RegexPatternGroup Type="EndScope" TokenKey="PreProcessorDirectiveEndToken" Style="DefaultStyle" PatternValue="{LineTerminatorMacro}" IsWhitespace="True" />	
				</Scope>
			</Scopes>
			
      <!-- Patterns Groups -->
			<PatternGroups>
				<RegexPatternGroup TokenKey="PreProcessorDirectiveDefaultToken" PatternValue="{NonLineTerminatorMacro}+" />
			</PatternGroups>
		</State>
	</States>

	<!-- Example Text -->
	<ExampleText>
		<![CDATA[
''' <summary>
''' Provides a helper class for generating random numbers.
''' </summary>
Public Class RandomHelper

	''' <summary>
	''' Returns a new random number.
	''' </summary>
	''' <param name="lowerBound">The lower bound of the number.</param>
	''' <param name="upperBound">The upper bound of the number.</param>
	''' <returns>The generated number.</returns>
	Public Function GetRandom(lowerBound As Integer, upperBound As Integer) 
		'Create a random number within the range
		Randomize
		GetRandom = CInt((upperBound - lowerBound) * Rnd + 1) 
	End Function 

	''' <summary>
	''' Returns an array of random numbers in the range of <c>0</c> to <c>100</c>.
	''' </summary>
	''' <param name="arraySize">The number of random numbers to generate.</param>
	''' <returns>The array of generated numbers.</returns>
	Public Function RangedRandomArray(arraySize As Integer) 
		Dim tempArray() As Integer  'storage for a working array 
		Dim index As Integer
	    
		' Type in the text 'Select' on the next line and press the 
		' Tab key immediately after to activate a code snippet
		
		ReDim tempArray(arraySize) ' resize the tempArray to arraySize
	    
		For index = 1 To arraySize
			tempArray(index) = GetRandom(0, 100)
		Next index
	    
		'Return the array, populated with random integers to the caller of the function  
		RangedRandomArray = tempArray 
	End Function 
	
End Class
		]]>
	</ExampleText>
	
</SyntaxLanguage>
